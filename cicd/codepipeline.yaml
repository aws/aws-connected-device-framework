AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CodePipeline for building and deploying cdf-core services

Parameters:
  CodePipelineName:
    Description: Name of CICD pipeline to create.  If not provided, '${RepoName}-cicd-${Environment}' will be used.
    Type: String
  Environment:
    Description: The name of the environment this stack is being deployed to.
    Type: String
    MinLength: 1
  RepoName:
    Default: cdf-core
    Description: Name of codecommit repository for this application.
    Type: String
  Branch:
    Default: master
    Description: Name of codecommit branch.
    Type: String
  InfrastructureRepoName:
    Description: Name of codecommit repository for the cdf-infrastructure-{customer} module.
    Type: String
    MinLength: 1
  InfrastructureBranch:
    Default: master
    Description: Name of codecommit branch for the cdf-infrastructure-{customer} module.
    Type: String
    MinLength: 1
  ArtifactStoreBucketName:
    Description: Name of artifact store bucket.
    Type: String
    MinLength: 1
  DocumentationBucketName:
    Description: Name of bucket where CDF core documentation is published to and hosted from.
    Type: String
    MinLength: 1
  
  AssetLibraryMode:
    Description: Run in 'full' (IoT Registry augmentation) or 'lite' (IoT Registry only)
    Type: String
    Default: full
    AllowedValues: 
      - full
      - lite
    MinLength: 1
  AssetLibraryUseExistingVpc:
    Description:  Use an existing VPC instead of creating a new one
    Type: String
    Default: 'false'
    AllowedValues: 
      - 'true'
      - 'false'
  AssetLibraryVpcId:
    Description: Id of VPC where Neptune resides (if running Asset Library in 'full' mode)
    Type: String
  AssetLibrarySourceSecurityGroupId:
    Description: Id of security group with access to Neptune (if running Asset Library in 'full' mode)
    Type: String
  AssetLibraryPrivateSubnetIds:
    Description: Id of private subnets where Neptune resides (if running Asset Library in 'full' mode)
    Type: String
  AssetLibraryPrivateRouteTableIds:
    Description: Id of private route table ids where Neptune resides (if running Asset Library in 'full' mode)
    Type: String
  KeyPairName:
    Description:  Name of key pair to use to create a Bastion host (required if running Asset Library in 'full' mode)
    Type: String
  BastionPublicSubnetIds:
    Description: Id of public subnets for Bastion access (if running Asset Library in 'full' mode)
    Type: String
  BastionRemoteAccessCIDR:
    Description:  CIDR range to allow remote access from (required if running Asset Library in 'full' mode)
    Type: String
  KmsKeyId:
    Description:  The KMS Key id that the provisoning service will use to decrypt sensitive information.  If not provided, a new KMS key with the alias 'cdf' is created
    Type: String

Conditions:
  CodePipelineNameProvided:  !Not [ !Equals [ !Ref CodePipelineName, "" ] ]

Resources:

  FilterCommitsProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-filterCommits', !Sub '${RepoName}-cicd-${Environment}-filterCommits' ]
      Description: !Sub 'Filters git commits for the ${CodePipelineName} pipeline.'
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !Sub '${CodePipelineName}-filterCommits'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REPO_NAME
            Type: PLAINTEXT
            Value: !Ref RepoName
          - Name: BRANCH
            Type: PLAINTEXT
            Value: !Ref Branch
      Source: 
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            parameter-store:
              CDF_CODECOMMIT_USERNAME: "CDF_CODECOMMIT_USERNAME"
              CDF_CODECOMMIT_EMAIL: "CDF_CODECOMMIT_EMAIL"
              CDF_CODECOMMIT_PASSWORD: "CDF_CODECOMMIT_PASSWORD"
          phases:
            install:
              commands:
                - bash -c cicd/filterproject_install.bash
            pre_build:
              commands:
                - bash -c cicd/filterproject_prebuild.bash
          artifacts:
            base-directory: $CODEBUILD_SRC_DIR
            discard-paths: no
            files:
              - '**/*'

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-build', !Sub '${RepoName}-cicd-${Environment}-build' ]
      Description: !Sub 'Builds, unit tests, and performs code analysis as part of a ${RepoName} CodePipeline.'
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !Sub '${CodePipelineName}-build'
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: BRANCH
            Type: PLAINTEXT
            Value: !Ref Branch
      Source: 
        Type: CODEPIPELINE
        BuildSpec: |

          version: 0.2
          env:
            parameter-store:
              CDF_CODECOMMIT_USERNAME: "CDF_CODECOMMIT_USERNAME"
              CDF_CODECOMMIT_EMAIL: "CDF_CODECOMMIT_EMAIL"
              CDF_CODECOMMIT_PASSWORD: "CDF_CODECOMMIT_PASSWORD"
          phases:
            install:
              commands:
                - bash -c cicd/buildproject_install.bash

            pre_build:
              commands:
                - bash -c cicd/buildproject_prebuild.bash

            build:
              commands:
                - bash -c cicd/buildproject_build.bash

            post_build:
              commands:
                - bash -c cicd/buildproject_postbuild.bash

          artifacts:
            base-directory: $CODEBUILD_SRC_DIR
            discard-paths: no
            files:
              - '**/*'

  IntegrationTestingProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-integrationTests', !Sub '${RepoName}-cicd-${Environment}-integrationTests' ]
      Description: !Sub 'Runs integration tests against a deployment of ${RepoName}.'
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-integrationTests', !Sub '${RepoName}-cicd-${Environment}-integrationTests' ]
      TimeoutInMinutes: 10
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: DEPLOY_ARTIFACTS_STORE_BUCKET
            Type: PLAINTEXT
            Value: !Ref ArtifactStoreBucketName
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Sub '${Environment}-staging'
          - Name: ASSETLIBRARY_MODE
            Type: PLAINTEXT
            Value: !Ref AssetLibraryMode

      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - bash -c cicd/integrationtestsproject_install.bash
            pre_build:
              commands:
                - bash -c cicd/integrationtestsproject_prebuild.bash
            build:
              commands:
                - bash -c cicd/integrationtestsproject_build.bash


  ###  CodeBuild project that calls the package and deploy scripts to deploy the service, along with
  ###  setting any necessary CloudFormation configuration.
  DeployStagingProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployStaging', !Sub '${RepoName}-cicd-${Environment}-deployStaging' ]
      Description: !Sub 'Packages and deploys the CFN for deployment of ${RepoName}.'
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployStaging', !Sub '${RepoName}-cicd-${Environment}-deployStaging' ]
      TimeoutInMinutes: 30
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: DEPLOY_ARTIFACTS_STORE_BUCKET
            Type: PLAINTEXT
            Value: !Ref ArtifactStoreBucketName
          - Name: CONFIG_ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Sub '${Environment}-staging'
          - Name: VPC_ID
            Type: PLAINTEXT
            Value: !Ref AssetLibraryVpcId
          - Name: SOURCE_SECURITY_GROUP_ID
            Type: PLAINTEXT
            Value: !Ref AssetLibrarySourceSecurityGroupId
          - Name: PRIVATE_SUBNET_IDS
            Type: PLAINTEXT
            Value: !Ref AssetLibraryPrivateSubnetIds
          - Name: PUBLIC_SUBNET_IDS
            Type: PLAINTEXT
            Value: !Ref BastionPublicSubnetIds
          - Name: PRIVATE_ROUTE_TABLE_IDS
            Type: PLAINTEXT
            Value: !Ref AssetLibraryPrivateRouteTableIds
          - Name: ASSETLIBRARY_MODE
            Type: PLAINTEXT
            Value: !Ref AssetLibraryMode
          - Name: KEY_PAIR_NAME
            Type: PLAINTEXT
            Value: !Ref KeyPairName
          - Name: BASTION_REMOTE_ACCESS_CIDR
            Type: PLAINTEXT
            Value: !Ref BastionRemoteAccessCIDR
          - Name: KMS_KEY_ID
            Type: PLAINTEXT
            Value: !Ref KmsKeyId
          - Name: USE_EXISTING_VPC
            Type: PLAINTEXT
            Value: !Ref AssetLibraryUseExistingVpc   
          # - Name: CUST_AUTH_STACK_NAME
          #   Type: PLAINTEXT
          #   Value: !Ref CustAuthStackName
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            parameter-store:
              CDF_CODECOMMIT_USERNAME: "CDF_CODECOMMIT_USERNAME"
              CDF_CODECOMMIT_EMAIL: "CDF_CODECOMMIT_EMAIL"
              CDF_CODECOMMIT_PASSWORD: "CDF_CODECOMMIT_PASSWORD"
          phases:
            install:
              commands:
                - bash -c cicd/deployproject_install.bash
            build:
              commands:
                - bash -c cicd/deployproject_build.bash
            post_build:
              commands:
                - bash -c cicd/deployproject_postbuild.bash


  ###  CodeBuild project that calls the package and deploy scripts to deploy the service, along with
  ###  setting any necessary CloudFormation configuration.
  DeployLiveProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployLive', !Sub '${RepoName}-cicd-${Environment}-deployLive' ]
      Description: !Sub 'Packages and deploys the CFN for deployment of ${RepoName}.'
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployLive', !Sub '${RepoName}-cicd-${Environment}-deployLive' ]
      TimeoutInMinutes: 30
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: DEPLOY_ARTIFACTS_STORE_BUCKET
            Type: PLAINTEXT
            Value: !Ref ArtifactStoreBucketName
          - Name: CONFIG_ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: VPC_ID
            Type: PLAINTEXT
            Value: !Ref AssetLibraryVpcId
          - Name: SOURCE_SECURITY_GROUP_ID
            Type: PLAINTEXT
            Value: !Ref AssetLibrarySourceSecurityGroupId
          - Name: PRIVATE_SUBNET_IDS
            Type: PLAINTEXT
            Value: !Ref AssetLibraryPrivateSubnetIds
          - Name: PUBLIC_SUBNET_IDS
            Type: PLAINTEXT
            Value: !Ref BastionPublicSubnetIds
          - Name: PRIVATE_ROUTE_TABLE_IDS
            Type: PLAINTEXT
            Value: !Ref AssetLibraryPrivateRouteTableIds
          - Name: KEY_PAIR_NAME
            Type: PLAINTEXT
            Value: !Ref KeyPairName
          - Name: BASTION_REMOTE_ACCESS_CIDR
            Type: PLAINTEXT
            Value: !Ref BastionRemoteAccessCIDR
          - Name: KMS_KEY_ID
            Type: PLAINTEXT
            Value: !Ref KmsKeyId
          - Name: USE_EXISTING_VPC
            Type: PLAINTEXT
            Value: !Ref AssetLibraryUseExistingVpc
          - Name: MODE
            Type: PLAINTEXT
            Value: !Ref AssetLibraryMode

          - Name: ARTIFACT_PUBLISH_LOCATION
            Type: PLAINTEXT
            Value: !Sub 's3://${ArtifactStoreBucketName}/releases'
          - Name: DOCUMENTATION_PUBLISH_LOCATION
            Type: PLAINTEXT
            Value: !Sub 's3://${DocumentationBucketName}'

            
          # - Name: CUST_AUTH_STACK_NAME
          #   Type: PLAINTEXT
          #   Value: !Ref CustAuthStackName
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            parameter-store:
              CDF_CODECOMMIT_USERNAME: "CDF_CODECOMMIT_USERNAME"
              CDF_CODECOMMIT_EMAIL: "CDF_CODECOMMIT_EMAIL"
              CDF_CODECOMMIT_PASSWORD: "CDF_CODECOMMIT_PASSWORD"
          phases:
            install:
              commands:
                - bash -c cicd/deployproject_install.bash
            build:
              commands:
                - bash -c cicd/deployproject_build.bash
            post_build:
              commands:
                - bash -c cicd/deployproject_postbuild.bash


  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !If [CodePipelineNameProvided, !Ref CodePipelineName, !Sub '${RepoName}-cicd-${Environment}' ]
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        -
          Name: source
          Actions:
            -
              Name: main
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: source_main
              Configuration:
                BranchName: !Ref Branch
                RepositoryName: !Ref RepoName
              RunOrder: 1
            -
              Name: infrastructure
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: source_infrastructure
              Configuration:
                BranchName: !Ref InfrastructureBranch
                RepositoryName: !Ref InfrastructureRepoName
              RunOrder: 1

        -
          Name: filter-commits
          Actions:
            -
              Name: filter
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: source_main
              OutputArtifacts:
                - Name: gitified_main
              Configuration:
                ProjectName: !Ref FilterCommitsProject
              RunOrder: 1

        -
          Name: build
          Actions:
            -
              Name: build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: gitified_main
                - Name: source_infrastructure
              OutputArtifacts:
                - Name: compiled
              Configuration:
                ProjectName: !Ref BuildProject
                PrimarySource: gitified_main
              RunOrder: 1

        -
          Name: deploy-staging
          Actions:
            -
              Name: deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: compiled
                - Name: source_infrastructure
              Configuration:
                ProjectName: !Ref DeployStagingProject
                PrimarySource: compiled
              RunOrder: 1

        -
          Name: integration-tests
          Actions:
            -
              Name: test
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: compiled
                - Name: source_infrastructure
              Configuration:
                ProjectName: !Ref IntegrationTestingProject
                PrimarySource: compiled
              RunOrder: 1

        -
          Name: deploy-live
          Actions:
            -
              Name: deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: compiled
                - Name: source_infrastructure
              Configuration:
                ProjectName: !Ref DeployLiveProject
                PrimarySource: compiled
              RunOrder: 1

      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucketName

  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-codeBuildRole', !Sub '${RepoName}-cicd-${Environment}-codeBuildRole' ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - cloudformation.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser
      Policies: 
        - 
          PolicyName: "CodeBuildServicePolicies"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 

              -
                Sid: kms
                Effect: Allow
                Action:
                  - kms:CreateKey
                Resource:
                  - '*'
              -
                Sid: SSM
                Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CDF_CODECOMMIT_USERNAME'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CDF_CODECOMMIT_PASSWORD'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CDF_CODECOMMIT_EMAIL'
              - 
                Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - 'logs:*'
                Resource:
                  - "*"
              - 
                Sid: S3Policy
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:PutBucketPolicy
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:DeleteBucketPolicy
                  - s3:PutBucketVersioning
                Resource:
                  - "*"
              - 
                Sid: CloudFormationPolicy
                Effect: Allow
                Action:
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:ListExports
                  - cloudformation:GetTemplateSummary
                  - cloudformation:SetStackPolicy
                Resource:
                  - "*"
              - 
                Sid: SNSPolicy
                Effect: Allow
                Action:
                  - sns:CreateTopic
                  - sns:DeleteTopic
                  - sns:GetTopicAttributes
                  - sns:SetTopicAttributes
                  - sns:Subscribe
                Resource:
                  - "*"
              - 
                Sid: CognitoPolicy
                Effect: Allow
                Action:
                  - cognito-idp:*
                Resource:
                  - "*"
              - 
                Sid: IamPolicy
                Effect: Allow
                Action:
                  - iam:*
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/cdf*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/cdf*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:instance-profile/cdf*'
              - 
                Sid: LambdaPolicy
                Effect: Allow
                Action:
                  - lambda:*
                Resource:
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:cdf-*'
              - 
                Sid: ApiGatewayPolicy
                Effect: Allow
                Action:
                  - apigateway:POST
                  - apigateway:PUT
                  - apigateway:PATCH
                  - apigateway:DELETE
                  - apigateway:GET
                Resource:
                  - !Sub 'arn:aws:apigateway:${AWS::Region}::/*'
              - 
                Sid: DynamoDBPolicy
                Action:
                  - 'dynamodb:*'
                Effect: Allow
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/cdf-commands-*-${Environment}*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/cdf-bulkcerts-*-${Environment}*'
              - 
                Sid: ec2
                Action:
                  - 'ec2:AllocateAddress'
                  - 'ec2:AssociateAddress'
                  - 'ec2:AuthorizeSecurityGroupEgress'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:CreateSecurityGroup'
                  - 'ec2:CreateVpcEndpoint'
                  - 'ec2:DeleteSecurityGroup'
                  - 'ec2:DescribeAddresses'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeKeyPairs'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeVpcEndpoints'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DisassociateAddress'
                  - 'ec2:ReleaseAddress'
                  - 'ec2:RevokeSecurityGroupEgress'
                Effect: Allow
                Resource: 
                  - "*"
              -
                Sid: autoscaling
                Action:
                  - 'autoscaling:*'
                Effect: Allow
                Resource: 
                  - "*"
              - 
                Sid: rds
                Action:
                  - 'rds:*'
                Effect: Allow
                Resource: 
                  - "*"
              - 
                Sid: iot
                Action:
                  - 'iot:CreateTopicRule'
                  - 'iot:CreatePolicy'
                  - 'iot:CreatePolicyVersion'
                  - 'iot:DeletePolicyVersion'
                  - 'iot:DescribeEndpoint'
                  - 'iot:ListPolicyVersions'
                  - 'iot:UpdateEventConfigurations'
                Effect: Allow
                Resource: 
                  - "*"
                   
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-codePipelineRole', !Sub '${RepoName}-cicd-${Environment}-codePipelineRole' ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser
      Policies: 
        - 
          PolicyName: "CodePipelineServicePolicies"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: "*"
                Effect: Allow
              - 
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactStoreBucketName}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactStoreBucketName}'
                Effect: Allow
              - 
                Action:
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::codepipeline*
                Effect: Allow
              - 
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: "*"
                Effect: Allow
              - 
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                  - lambda:ListTags
                  - lambda:TagResource
                  - lambda:UntagResource
                Resource: "*"
                Effect: Allow
              - 
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
              - 
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: "*"
                Effect: Allow
                  
  CicdInvokerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-cicdInvokerRole', !Sub '${RepoName}-cicd-${Environment}-cicdInvokerRole' ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
      Policies: 
        - 
          PolicyName: "CodePipelinePolicies"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Action:
                  - 'codepipeline:StartPipelineExecution'
                Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:cdf-*-${Environment}'
                Effect: Allow   
                
  FailedTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: !Sub '${DeployPipeline}-onFailure'
      TopicName: !Sub '${DeployPipeline}-onFailure'

  FailedTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
      Topics:
        - !Ref FailedTopic

  SuccessTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: !Sub '${DeployPipeline}-onSuccess'
      TopicName: !Sub '${DeployPipeline}-onSuccess'
    DependsOn: 
      - DeployPipeline

  SuccessTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
      Topics:
        - !Ref SuccessTopic
        
  SuccessRule:
    Type: "AWS::Events::Rule"
    Properties: 
      Name: !Sub '${DeployPipeline}-onSuccess'
      Description: !Sub '${RepoName} CodePipeline success.'
      EventPattern: 
        source:
          - "aws.codepipeline"
        detail-type:
          - "CodePipeline Pipeline Execution State Change"
        detail:
          state:
            - "SUCCEEDED"
          pipeline:
            - !Ref DeployPipeline
      State: "ENABLED"
      Targets:
        - 
          Id: success
          Arn: !Ref SuccessTopic
    DependsOn: 
      - DeployPipeline

  ###  Trigger SNS upon failed CodePipelines  ###
  FailedRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub '${DeployPipeline}-onFail'
      Description: !Sub '${RepoName} CodePipeline failure.'
      EventPattern:
        source:
          - "aws.codepipeline"
        detail-type:
          - "CodePipeline Pipeline Execution State Change"
        detail:
          state:
            - "FAILED"
          pipeline:
            - !Ref DeployPipeline
      State: "ENABLED"
      Targets:
        -
          Id: failed
          Arn: !Ref FailedTopic
          InputTransformer:
            InputTemplate: '"The Pipeline <pipeline> has failed." '
            InputPathsMap:
              pipeline: "$.detail.pipeline" 
    DependsOn: 
      - DeployPipeline
