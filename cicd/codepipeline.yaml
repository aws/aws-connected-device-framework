AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CodePipeline for building and deploying cdf-core services

Parameters:
  CodePipelineName:
    Description: Name of CICD pipeline to create.  If not provided, '${RepoName}-cicd-${Environment}' will be used.
    Type: String
  Environment:
    Description: The name of the environment this stack is being deployed to.
    Type: String
    MinLength: 1
  RepoName:
    Default: cdf-core
    Description: Name of codecommit repository for this application.
    Type: String
  Branch:
    Default: master
    Description: Name of codecommit branch.
    Type: String
  InfrastructureRepoName:
    Description: Name of codecommit repository for the cdf-infrastructure-{customer} module.
    Type: String
    MinLength: 1
  InfrastructureBranch:
    Default: master
    Description: Name of codecommit branch for the cdf-infrastructure-{customer} module.
    Type: String
    MinLength: 1
  CommonCICDStackName:
    Description: Name of CICD common stack name.
    Type: String
    MinLength: 1
  
  AssetLibraryVpcId:
    Description: Id of VPC where Neptune resides (if running Asset Library in 'full' mode)
    Type: String
  AssetLibrarySourceSecurityGroupId:
    Description: Id of security group with access to Neptune (if running Asset Library in 'full' mode)
    Type: String
  AssetLibraryPrivateSubnetIds:
    Description: Id of private subnets where Neptune resides (if running Asset Library in 'full' mode)
    Type: String
  AssetLibraryPrivateRouteTableIds:
    Description: Id of private route table ids where Neptune resides (if running Asset Library in 'full' mode)
    Type: String


Conditions:
  CodePipelineNameProvided:  !Not [ !Equals [ !Ref CodePipelineName, "" ] ]

Resources:

  FilterCommitsProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-filterCommits', !Sub '${RepoName}-cicd-${Environment}-filterCommits' ]
      Description: !Sub 'Filters git commits for the ${CodePipelineName} pipeline.'
      ServiceRole:
        Fn::ImportValue:
          !Sub '${CommonCICDStackName}-CodeBuildRole'
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !Sub '${CodePipelineName}-filterCommits'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REPO_NAME
            Type: PLAINTEXT
            Value: !Ref RepoName
          - Name: BRANCH
            Type: PLAINTEXT
            Value: !Ref Branch
      Source: 
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            parameter-store:
              CDF_CODECOMMIT_USERNAME: "CDF_CODECOMMIT_USERNAME"
              CDF_CODECOMMIT_EMAIL: "CDF_CODECOMMIT_EMAIL"
              CDF_CODECOMMIT_PASSWORD: "CDF_CODECOMMIT_PASSWORD"
          phases:
            install:
              commands:
                - bash -c cicd/filterproject_install.bash
            pre_build:
              commands:
                - bash -c cicd/filterproject_prebuild.bash
          artifacts:
            base-directory: $CODEBUILD_SRC_DIR
            discard-paths: no
            files:
              - '**/*'

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-build', !Sub '${RepoName}-cicd-${Environment}-build' ]
      Description: !Sub 'Builds, unit tests, and performs code analysis as part of a ${RepoName} CodePipeline.'
      ServiceRole: 
        Fn::ImportValue:
          !Sub '${CommonCICDStackName}-CodeBuildRole'
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !Sub '${CodePipelineName}-build'
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: BRANCH
            Type: PLAINTEXT
            Value: !Ref Branch
      Source: 
        Type: CODEPIPELINE
        BuildSpec: |

          version: 0.2
          env:
            parameter-store:
              CDF_CODECOMMIT_USERNAME: "CDF_CODECOMMIT_USERNAME"
              CDF_CODECOMMIT_EMAIL: "CDF_CODECOMMIT_EMAIL"
              CDF_CODECOMMIT_PASSWORD: "CDF_CODECOMMIT_PASSWORD"
          phases:
            install:
              commands:
                - printenv
                - cicd/buildproject_install.sh

            pre_build:
              commands:
                - cicd/buildproject_prebuild.sh

            build:
              commands:
                - cicd/buildproject_build.sh

            post_build:
              commands:
                - cicd/buildproject_postbuild.sh

          artifacts:
            base-directory: $CODEBUILD_SRC_DIR
            discard-paths: no
            files:
              - node_modules
              - '**/*'

  IntegrationTestingProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-integrationTests', !Sub '${RepoName}-cicd-${Environment}-integrationTests' ]
      Description: !Sub 'Runs integration tests against a deployment of ${RepoName}.'
      ServiceRole:
        Fn::ImportValue:
          !Sub '${CommonCICDStackName}-CodeBuildRole'
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-integrationTests', !Sub '${RepoName}-cicd-${Environment}-integrationTests' ]
      TimeoutInMinutes: 10
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: DEPLOY_ARTIFACTS_STORE_BUCKET
            Type: PLAINTEXT
            Value:
              Fn::ImportValue:
                !Sub '${CommonCICDStackName}-ArtifactBucket'
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Sub '${Environment}-staging'

      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - cicd/integrationtestingproject_install.sh
            build:
              commands:
                - cicd/integrationtestingproject_build.sh
                

  ###  CodeBuild project that calls the package and deploy scripts to deploy the service, along with
  ###  setting any necessary CloudFormation configuration.
  DeployStagingProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployStaging', !Sub '${RepoName}-cicd-${Environment}-deployStaging' ]
      Description: !Sub 'Packages and deploys the CFN for deployment of ${RepoName}.'
      ServiceRole:
        Fn::ImportValue:
          !Sub '${CommonCICDStackName}-CodeBuildRole'
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployStaging', !Sub '${RepoName}-cicd-${Environment}-deployStaging' ]
      TimeoutInMinutes: 30
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: DEPLOY_ARTIFACTS_STORE_BUCKET
            Type: PLAINTEXT
            Value:
              Fn::ImportValue:
                !Sub '${CommonCICDStackName}-ArtifactBucket'
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Sub '${Environment}-staging'
          - Name: VPC_ID
            Type: PLAINTEXT
            Value: !Ref AssetLibraryVpcId
          - Name: SOURCE_SECURITY_GROUP_ID
            Type: PLAINTEXT
            Value: !Ref AssetLibrarySourceSecurityGroupId
          - Name: PRIVATE_SUBNET_IDS
            Type: PLAINTEXT
            Value: !Ref AssetLibraryPrivateSubnetIds
          - Name: PRIVATE_ROUTE_TABLE_IDS
            Type: PLAINTEXT
            Value: !Ref AssetLibraryPrivateRouteTableIds
          # - Name: CUST_AUTH_STACK_NAME
          #   Type: PLAINTEXT
          #   Value: !Ref CustAuthStackName
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - cicd/deployproject_install.sh
            build:
              commands:
                - cicd/deployproject_build.sh
            post_build:
              commands:
                - cicd/deployproject_postbuild.sh


  ###  CodeBuild project that calls the package and deploy scripts to deploy the service, along with
  ###  setting any necessary CloudFormation configuration.
  DeployLiveProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployLive', !Sub '${RepoName}-cicd-${Environment}-deployLive' ]
      Description: !Sub 'Packages and deploys the CFN for deployment of ${RepoName}.'
      ServiceRole:
        Fn::ImportValue:
          !Sub '${CommonCICDStackName}-CodeBuildRole'
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployLive', !Sub '${RepoName}-cicd-${Environment}-deployLive' ]
      TimeoutInMinutes: 30
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: DEPLOY_ARTIFACTS_STORE_BUCKET
            Type: PLAINTEXT
            Value:
              Fn::ImportValue:
                !Sub '${CommonCICDStackName}-ArtifactBucket'
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: VPC_ID
            Type: PLAINTEXT
            Value: !Ref AssetLibraryVpcId
          - Name: SOURCE_SECURITY_GROUP_ID
            Type: PLAINTEXT
            Value: !Ref AssetLibrarySourceSecurityGroupId
          - Name: PRIVATE_SUBNET_IDS
            Type: PLAINTEXT
            Value: !Ref AssetLibraryPrivateSubnetIds
          - Name: PRIVATE_ROUTE_TABLE_IDS
            Type: PLAINTEXT
            Value: !Ref AssetLibraryPrivateRouteTableIds
          # - Name: CUST_AUTH_STACK_NAME
          #   Type: PLAINTEXT
          #   Value: !Ref CustAuthStackName
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - cicd/deployproject_install.sh
            build:
              commands:
                - cicd/deployproject_build.sh
            post_build:
              commands:
                - cicd/deployproject_postbuild.sh


  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !If [CodePipelineNameProvided, !Ref CodePipelineName, !Sub '${RepoName}-cicd-${Environment}' ]
      RoleArn:
        Fn::ImportValue:
          !Sub '${CommonCICDStackName}-CodePipelineRoleArn'
      Stages:
        -
          Name: source
          Actions:
            -
              Name: main
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: source_main
              Configuration:
                BranchName: !Ref Branch
                RepositoryName: !Ref RepoName
              RunOrder: 1
            -
              Name: infrastructure
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: source_infrastructure
              Configuration:
                BranchName: !Ref InfrastructureBranch
                RepositoryName: !Ref InfrastructureRepoName
              RunOrder: 1

        -
          Name: filter-commits
          Actions:
            -
              Name: filter
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: source_main
              OutputArtifacts:
                - Name: gitified_main
              Configuration:
                ProjectName: !Ref FilterCommitsProject
              RunOrder: 1

        -
          Name: build
          Actions:
            -
              Name: build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: gitified_main
                - Name: source_infrastructure
              OutputArtifacts:
                - Name: compiled
              Configuration:
                ProjectName: !Ref BuildProject
                PrimarySource: gitified_main
              RunOrder: 1

        -
          Name: deploy-staging
          Actions:
            -
              Name: deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: compiled
                - Name: source_infrastructure
              Configuration:
                ProjectName: !Ref DeployStagingProject
                PrimarySource: compiled
              RunOrder: 1

        -
          Name: integration-tests
          Actions:
            -
              Name: test
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: compiled
                - Name: source_infrastructure
              Configuration:
                ProjectName: !Ref IntegrationTestingProject
                PrimarySource: compiled
              RunOrder: 1

        -
          Name: deploy-live
          Actions:
            -
              Name: deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: compiled
                - Name: source_infrastructure
              Configuration:
                ProjectName: !Ref DeployLiveProject
                PrimarySource: compiled
              RunOrder: 1

      ArtifactStore:
        Type: S3
        Location:
          Fn::ImportValue:
            !Sub '${CommonCICDStackName}-ArtifactBucket'


  ### Nested stack creates the success and failure topics and rules
  NestedStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ../../cdf-js/cdf-cicd/infrastructure/cicd-nested-library.yaml
      Parameters:
        CodePipelineName: !If [CodePipelineNameProvided, !Ref CodePipelineName, !Sub '${RepoName}-cicd-${Environment}' ]
        RepoName: !Ref RepoName
        DeployPipeline: !Ref DeployPipeline
        CommonCICDStackName: !Ref CommonCICDStackName

    DependsOn: 
      - DeployPipeline

      
Outputs:  
  SuccessTopic:
    Value: !GetAtt NestedStack.Outputs.SuccessTopic
    Export: 
      Name: !Sub '${AWS::StackName}-SuccessTopic'
