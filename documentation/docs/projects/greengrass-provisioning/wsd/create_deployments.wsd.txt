title Deploy Group

participant "User" as u
participant "<<CDF>>\nGreengrass\nDeployments" as cdfgd
participant "<<AWS>>\nSQS:NewDeployments" as sqs1

participant "<<AWS>>\nGreengrass" as gg
participant "<<AWS>>\nDynamoDB" as ddb
participant "<<AWS>>\nS3" as s3
participant "<<AWS>>\nEventBridge" as eb
participant "<<AWS>>\nSQS:DeploymentStatus" as sqs2

note right of u:
    Step 1:
    Submit request to deploy.
    Returns asynchronouosly.
end note

u -> cdfgd : POST /deployments\n{group-name, deployment-type}[]
activate cdfgd

cdfgd->ddb: save task info
activate ddb
deactivate ddb

cdfgd -> sqs1 : [async] send-message
activate sqs1
cdfgd --> u : Accepted (deployment-id)
deactivate cdfgd




note right of cdfgd:
    Step 2:
    Deployment task processed asynchronously.
end note

sqs1 -> cdfgd : invoke
activate cdfgd

cdfgd->ddb: get task info
ddb-->cdfgd: task
activate ddb
deactivate ddb

loop groups to deploy
    opt group-version-id not provided
        cdfgd -> gg : get-group(group-id)
        activate gg
        gg --> cdfgd : latest-version-id
        deactivate gg
    end

end

note right of cdfgd:
    Attempt to process all new deployments first.
    If not possible, the service is terminated, and
    the message remains on the queue.
end note
opt NewDeployment's requested

    cdfgd -> gg : list-bulk-deployments
    activate gg
    gg --> cdfgd : bulk-deployments
    deactivate gg

    cdfgd -> gg : list-bulk-deployment-detailed-reports\n(latest bulk-deployment-id)
    activate gg
    gg --> cdfgd : bulk deployment status
    deactivate gg

    alt no bulk deployment in progress

        cdfgd -> s3 : put bulk deployment request
        activate s3
        deactivate s3

        cdfgd -> gg : [async] start-bulk-deployments
        activate gg
        deactivate gg

        cdfgd -> ddb : put bulk-deployment-id, status change
        activate ddb
        deactivate ddb

    else an existing bulk deployment in progress
        cdfgd -> ddb : put conflict status
        activate ddb
        deactivate ddb
        cdfgd -> cdfgd : terminate
    end

end


loop groups to redeploy
  cdfgd->gg: create-deployment
  activate gg
  deactivate gg
end


loop groups to reset
  cdfgd->gg: reset-deployments
  activate gg
  deactivate gg
end


cdfgd -> ddb : put status change
activate ddb
deactivate ddb

cdfgd->sqs1: delete-message
deactivate sqs1


note right of gg
    Step 3:
    Greengrass deployment status changed
end note

loop for each group status change
    gg -> eb : notify
    activate gg
    deactivate gg
    activate eb
    eb -> sqs2 : [async] send-message
    deactivate eb
    activate sqs2
    sqs2 -> cdfgd : invoke
    deactivate sqs2

    activate cdfgd
    cdfgd -> cdfgd : deployment status change
    activate cdfgd
    cdfgd -> ddb : put status change
    activate ddb
    deactivate ddb
    deactivate cdfgd
    deactivate cdfgd
end loop
