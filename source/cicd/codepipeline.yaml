#-----------------------------------------------------------------------------------------------------------------------
#   Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
#  with the License. A copy of the License is located at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
#  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
#  and limitations under the License.
#-----------------------------------------------------------------------------------------------------------------------
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CodePipeline for building and deploying cdf-core services

Parameters:
  CodePipelineName:
    Description: Name of CICD pipeline to create.  If not provided, '${CdfCoreRepoName}-cicd-${Environment}' will be used.
    Type: String
  Environment:
    Description: The name of the environment this stack is being deployed to.
    Type: String
    MinLength: 1
  CdfCoreRepoName:
    Default: aws-connected-device-framework
    Description: Name of codecommit repository for this application.
    Type: String
  CdfCoreBranch:
    Default: master
    Description: Name of codecommit branch.
    Type: String
  InfrastructureRepoName:
    Description: Name of codecommit repository for the cdf-infrastructure-{customer} module.
    Type: String
    MinLength: 1
  InfrastructureBranch:
    Default: master
    Description: Name of codecommit branch for the cdf-infrastructure-{customer} module.
    Type: String
    MinLength: 1
  FacadeRepoName:
    Description: Name of codecommit repository for the cdf-facade-{customer} module.
    Type: String
    MinLength: 1
    Default: cdf-facade-demo
  FacadeBranch:
    Default: master
    Description: Name of codecommit branch for the cdf-facade-{customer} module.
    Type: String
    MinLength: 1

  LiveRegion:
    Description: Name of the region to deploy Live Envirnonment
    Type: String
    MinLength: 1

  StagingArtifactStoreBucketName:
    Description: Name of artifact store bucket.
    Type: String
    MinLength: 1
  LiveArtifactStoreBucketName:
    Description: Name of the live store bucket
    Type: String
    MinLength: 1
  DocumentationBucketName:
    Description: Name of bucket where CDF core documentation is published to and hosted from.
    Type: String
    MinLength: 1
  
  AssetLibraryMode:
    Description: Run in 'full' (IoT Registry augmentation) or 'lite' (IoT Registry only)
    Type: String
    Default: full
    AllowedValues: 
      - full
      - lite
    MinLength: 1

  StagingKeyPairName:
    Description: Name of key pair to use to create a Bastion host (required if running Asset Library in 'full' mode)
    Type: String
  LiveKeyPairName:
    Description:  Name of key pair to use to create a Bastion host (required if running Asset Library in 'full' mode)
    Type: String
  ApiGatewayAuth:
    Description: API Gateway authorization type. Must be from the following list.
    Type: String
  TemplateSnippetS3UriBase:
    Description: S3 uri base directory where Cloudformation template snippets are stored.
    Type: String
    MinLength: 1
  TemplateSnippetS3UriBaseLive:
    Description: S3 uri base directory where Cloudformation template snippets are stored.
    Type: String
    MinLength: 1
  APiGatewayDefinitionTemplate:
    Description: Name of API Gateway cloudformation template snippet. If none provided, all API Gateway instances are configured without authentication.
    Type: String
    MinLength: 1
    Default: cfn-apiGateway-noAuth.yaml
  AssetLibraryUseExistingVpc:
    Description:  Use an existing VPC instead of creating a new one
    Type: String
    Default: 'false'
    AllowedValues: 
      - 'true'
      - 'false'
  AssetLibraryVpcId:
    Description: Id of VPC where Neptune resides (if running Asset Library in 'full' mode)
    Type: String
  AssetLibrarySourceSecurityGroupId:
    Description: Id of security group with access to Neptune (if running Asset Library in 'full' mode)
    Type: String
  AssetLibraryPrivateSubnetIds:
    Description: Id of private subnets where Neptune resides (if running Asset Library in 'full' mode)
    Type: String
  AssetLibraryPrivateRouteTableIds:
    Description: Id of private route table ids where Neptune resides (if running Asset Library in 'full' mode)
    Type: String
  BastionPublicSubnetIds:
    Description: Id of public subnets for Bastion access (if running Asset Library in 'full' mode)
    Type: String
  BastionRemoteAccessCIDR:
    Description:  CIDR range to allow remote access from (required if running Asset Library in 'full' mode)
    Type: String


Conditions:
  CodePipelineNameProvided:  !Not [ !Equals [ !Ref CodePipelineName, "" ] ]

Resources:

  FilterCommitsProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-filterCommits', !Sub '${CdfCoreRepoName}-cicd-${Environment}-filterCommits' ]
      Description: !Sub 'Filters git commits for the ${CodePipelineName} pipeline.'
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !Sub '${CodePipelineName}-filterCommits'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REPO_NAME
            Type: PLAINTEXT
            Value: !Ref CdfCoreRepoName
          - Name: BRANCH
            Type: PLAINTEXT
            Value: !Ref CdfCoreBranch
      Source: 
        Type: CODEPIPELINE
        BuildSpec: |

          version: 0.2
          env:
            parameter-store:
              CDF_CODECOMMIT_USERNAME: "CDF_CODECOMMIT_USERNAME"
              CDF_CODECOMMIT_EMAIL: "CDF_CODECOMMIT_EMAIL"
              CDF_CODECOMMIT_PASSWORD: "CDF_CODECOMMIT_PASSWORD"
          phases:
            install:
              runtime-versions:
                nodejs: 12
              commands:
                - n 14.16.1
                - bash -c source/cicd/filterproject_install.bash
            pre_build:
              commands:
                - bash -c source/cicd/filterproject_prebuild.bash
          artifacts:
            base-directory: $CODEBUILD_SRC_DIR
            discard-paths: no
            files:
              - '**/*'

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-build', !Sub '${CdfCoreRepoName}-cicd-${Environment}-build' ]
      Description: !Sub 'Builds, unit tests, and performs code analysis as part of a ${CdfCoreRepoName} CodePipeline.'
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !Sub '${CodePipelineName}-build'
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: BRANCH
            Type: PLAINTEXT
            Value: !Ref CdfCoreBranch
      Source: 
        Type: CODEPIPELINE
        BuildSpec: |

          version: 0.2
          env:
            parameter-store:
              CDF_CODECOMMIT_USERNAME: "CDF_CODECOMMIT_USERNAME"
              CDF_CODECOMMIT_EMAIL: "CDF_CODECOMMIT_EMAIL"
              CDF_CODECOMMIT_PASSWORD: "CDF_CODECOMMIT_PASSWORD"
          phases:
            install:
              runtime-versions:
                nodejs: 12
              commands:
                - n 14.16.1
                - bash -c source/cicd/buildproject_install.bash

            pre_build:
              commands:
                - bash -c source/cicd/buildproject_prebuild.bash

            build:
              commands:
                - bash -c source/cicd/buildproject_build.bash

            post_build:
              commands:
                - bash -c source/cicd/buildproject_postbuild.bash

          artifacts:
            base-directory: $CODEBUILD_SRC_DIR
            discard-paths: no
            files:
              - '**/*'

  IntegrationTestingProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-integrationTests', !Sub '${CdfCoreRepoName}-cicd-${Environment}-integrationTests' ]
      Description: !Sub 'Runs integration tests against a deployment of ${CdfCoreRepoName}.'
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-integrationTests', !Sub '${CdfCoreRepoName}-cicd-${Environment}-integrationTests' ]
      TimeoutInMinutes: 10
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: DEPLOY_ARTIFACTS_STORE_BUCKET
            Type: PLAINTEXT
            Value: !Ref StagingArtifactStoreBucketName
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Sub '${Environment}-staging'
          - Name: ASSETLIBRARY_MODE
            Type: PLAINTEXT
            Value: !Ref AssetLibraryMode

      Source:
        Type: CODEPIPELINE
        BuildSpec: |

          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 12
              commands:
                - n 14.16.1
                - bash -c source/cicd/integrationtestsproject_install.bash
            pre_build:
              commands:
                - bash -c source/cicd/integrationtestsproject_prebuild.bash
            build:
              commands:
                - bash -c source/cicd/integrationtestsproject_build.bash


  ###  CodeBuild project that calls the package and deploy scripts to deploy the service, along with
  ###  setting any necessary CloudFormation configuration.
  DeployStagingProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployStaging', !Sub '${CdfCoreRepoName}-cicd-${Environment}-deployStaging' ]
      Description: !Sub 'Packages and deploys the CFN for deployment of ${CdfCoreRepoName}.'
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployStaging', !Sub '${CdfCoreRepoName}-cicd-${Environment}-deployStaging' ]
      TimeoutInMinutes: 60
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: DEPLOY_ARTIFACTS_STORE_BUCKET
            Type: PLAINTEXT
            Value: !Ref StagingArtifactStoreBucketName
          - Name: CONFIG_ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Sub '${Environment}-staging'
          - Name: ASSETLIBRARY_MODE
            Type: PLAINTEXT
            Value: !Ref AssetLibraryMode
          - Name: KEY_PAIR_NAME
            Type: PLAINTEXT
            Value: !Ref StagingKeyPairName
          - Name: API_GATEWAY_AUTH
            Type: PLAINTEXT
            Value: !Ref ApiGatewayAuth
          - Name: TEMPLATE_SNIPPET_S3_URI_BASE
            Type: PLAINTEXT
            Value: !Ref TemplateSnippetS3UriBase
          - Name: API_GATEWAY_DEFINITION_TEMPLATE
            Type: PLAINTEXT
            Value: !Ref APiGatewayDefinitionTemplate
          - Name: DEPLOY_REGION
            Type: PLAINTEXT
            Value: !Ref 'AWS::Region'
      Source:
        Type: CODEPIPELINE
        BuildSpec: |

          version: 0.2
          env:
            parameter-store:
              CDF_CODECOMMIT_USERNAME: "CDF_CODECOMMIT_USERNAME"
              CDF_CODECOMMIT_EMAIL: "CDF_CODECOMMIT_EMAIL"
              CDF_CODECOMMIT_PASSWORD: "CDF_CODECOMMIT_PASSWORD"
          phases:
            install:
              runtime-versions:
                nodejs: 12
              commands:
                - n 14.16.1
                - bash -c source/cicd/deployproject_install.bash
            build:
              commands:
                - bash -c source/cicd/deployproject_build.bash
            post_build:
              commands:
                - bash -c source/cicd/deployproject_postbuild.bash


  ###  CodeBuild project that calls the package and deploy scripts to deploy the service, along with
  ###  setting any necessary CloudFormation configuration.
  DeployLiveProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployLive', !Sub '${CdfCoreRepoName}-cicd-${Environment}-deployLive' ]
      Description: !Sub 'Packages and deploys the CFN for deployment of ${CdfCoreRepoName}.'
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deployLive', !Sub '${CdfCoreRepoName}-cicd-${Environment}-deployLive' ]
      TimeoutInMinutes: 60
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: DEPLOY_ARTIFACTS_STORE_BUCKET
            Type: PLAINTEXT
            Value: !Ref LiveArtifactStoreBucketName
          - Name: CONFIG_ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: KEY_PAIR_NAME
            Type: PLAINTEXT
            Value: !Ref LiveKeyPairName
          - Name: ARTIFACT_PUBLISH_LOCATION
            Type: PLAINTEXT
            Value: !Sub 's3://${LiveArtifactStoreBucketName}/releases'
          - Name: DOCUMENTATION_PUBLISH_LOCATION
            Type: PLAINTEXT
            Value: !Sub 's3://${DocumentationBucketName}'
          - Name: API_GATEWAY_AUTH
            Type: PLAINTEXT
            Value: !Ref ApiGatewayAuth
          - Name: TEMPLATE_SNIPPET_S3_URI_BASE
            Type: PLAINTEXT
            Value: !Ref TemplateSnippetS3UriBaseLive
          - Name: API_GATEWAY_DEFINITION_TEMPLATE
            Type: PLAINTEXT
            Value: !Ref APiGatewayDefinitionTemplate
          - Name: DEPLOY_REGION
            Type: PLAINTEXT
            Value: !Ref LiveRegion
          - Name: VPC_ID
            Type: PLAINTEXT
            Value: !Ref AssetLibraryVpcId
          - Name: SOURCE_SECURITY_GROUP_ID
            Type: PLAINTEXT
            Value: !Ref AssetLibrarySourceSecurityGroupId
          - Name: PRIVATE_SUBNET_IDS
            Type: PLAINTEXT
            Value: !Ref AssetLibraryPrivateSubnetIds
          - Name: PUBLIC_SUBNET_IDS
            Type: PLAINTEXT
            Value: !Ref BastionPublicSubnetIds
          - Name: PRIVATE_ROUTE_TABLE_IDS
            Type: PLAINTEXT
            Value: !Ref AssetLibraryPrivateRouteTableIds
          - Name: BASTION_REMOTE_ACCESS_CIDR
            Type: PLAINTEXT
            Value: !Ref BastionRemoteAccessCIDR
          - Name: USE_EXISTING_VPC
            Type: PLAINTEXT
            Value: !Ref AssetLibraryUseExistingVpc

      Source:
        Type: CODEPIPELINE
        BuildSpec: |

          version: 0.2
          env:
            parameter-store:
              CDF_CODECOMMIT_USERNAME: "CDF_CODECOMMIT_USERNAME"
              CDF_CODECOMMIT_EMAIL: "CDF_CODECOMMIT_EMAIL"
              CDF_CODECOMMIT_PASSWORD: "CDF_CODECOMMIT_PASSWORD"
          phases:
            install:
              runtime-versions:
                nodejs: 12
              commands:
                - n 14.16.1
                - bash -c source/cicd/deployproject_install.bash
            build:
              commands:
                - bash -c source/cicd/deployproject_build.bash
            post_build:
              commands:
                - bash -c source/cicd/deployproject_postbuild.bash



  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !If [CodePipelineNameProvided, !Ref CodePipelineName, !Sub '${CdfCoreRepoName}-cicd-${Environment}' ]
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        -
          Name: source
          Actions:
            -
              Name: main
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: source_main
              Configuration:
                BranchName: !Ref CdfCoreBranch
                RepositoryName: !Ref CdfCoreRepoName
              RunOrder: 1
            -
              Name: infrastructure
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: source_infrastructure
              Configuration:
                BranchName: !Ref InfrastructureBranch
                RepositoryName: !Ref InfrastructureRepoName
              RunOrder: 1
            -
              Name: facade
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: source_facade
              Configuration:
                BranchName: !Ref FacadeBranch
                RepositoryName: !Ref FacadeRepoName
              RunOrder: 1

        -
          Name: filter-commits
          Actions:
            -
              Name: filter
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: source_main
              OutputArtifacts:
                - Name: gitified_main
              Configuration:
                ProjectName: !Ref FilterCommitsProject
              RunOrder: 1

        -
          Name: build
          Actions:
            -
              Name: build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: gitified_main
                - Name: source_infrastructure
              OutputArtifacts:
                - Name: compiled
              Configuration:
                ProjectName: !Ref BuildProject
                PrimarySource: gitified_main
              RunOrder: 1

        -
          Name: deploy-staging
          Actions:
            -
              Name: deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: compiled
                - Name: source_infrastructure
              Configuration:
                ProjectName: !Ref DeployStagingProject
                PrimarySource: compiled
              RunOrder: 1
              Region: !Ref "AWS::Region"

        -
          Name: integration-tests
          Actions:
            -
              Name: test
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: compiled
                - Name: source_infrastructure
              Configuration:
                ProjectName: !Ref IntegrationTestingProject
                PrimarySource: compiled
              RunOrder: 1

        -
          Name: deploy-live
          Actions:
            -
              Name: deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: compiled
                - Name: source_infrastructure
              Configuration:
                ProjectName: !Ref DeployLiveProject
                PrimarySource: compiled
              RunOrder: 1

      ArtifactStores:
        - Region: !Ref "AWS::Region"
          ArtifactStore:
            Type: S3
            Location: !Ref StagingArtifactStoreBucketName
        - Region: !Ref LiveRegion
          ArtifactStore:
            Type: S3
            Location: !Ref LiveArtifactStoreBucketName


  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-codeBuildRole', !Sub '${CdfCoreRepoName}-cicd-${Environment}-codeBuildRole' ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - cloudformation.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser
        - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess
      Policies: 
        - 
          PolicyName: "CodeBuildServicePolicies"
          PolicyDocument: 

            Version: '2012-10-17'
            Statement:
            - Sid: any
              Effect: Allow
              Action:
                - application-autoscaling:*
                - cloudformation:CreateChangeSet
                - cloudformation:DeleteStack
                - cloudformation:DescribeChangeSet
                - cloudformation:DescribeStacks
                - cloudformation:DescribeStackResources
                - cloudformation:ExecuteChangeSet
                - cloudformation:GetTemplateSummary
                - cloudformation:ListExports
                - cloudformation:SetStackPolicy
                - cognito-idp:*
                - dax:CreateCluster
                - dax:CreateParameterGroup
                - dax:CreateSubnetGroup
                - dax:DeleteCluster
                - dax:DeleteParameterGroup
                - dax:DeleteSubnetGroup
                - dax:DescribeClusters
                - dax:DescribeDefaultParameters
                - dax:DescribeEvents
                - dax:DescribeParameterGroups
                - dax:DescribeParameters
                - dax:DescribeSubnetGroups
                - dax:UpdateCluster
                - dax:UpdateParameterGroup
                - dax:UpdateSubnetGroup
                - dynamodb:CreateTable
                - dynamodb:CreateBackup
                - dynamodb:CreateTable
                - dynamodb:DeleteTable
                - dynamodb:DeleteTable
                - dynamodb:DescribeStream
                - dynamodb:DescribeContinuousBackups
                - dynamodb:DescribeBackup
                - dynamodb:DescribeTable
                - dynamodb:ListStreams
                - dynamodb:ListStreams
                - dynamodb:ListTables
                - dynamodb:UpdateTable
                - dynamodb:UpdateContinuousBackups
                - ec2:AllocateAddress
                - ec2:AssociateAddress
                - ec2:AssociateRouteTable
                - ec2:AttachInternetGateway
                - ec2:AuthorizeSecurityGroupEgress
                - ec2:AuthorizeSecurityGroupIngress
                - ec2:CreateInternetGateway
                - ec2:CreateRoute
                - ec2:CreateRouteTable
                - ec2:CreateSecurityGroup
                - ec2:CreateFlowLogs
                - ec2:CreateNatGateway
                - ec2:CreateSubnet
                - ec2:CreateNetwork*
                - ec2:CreateTags
                - ec2:CreateVpc
                - ec2:CreateVpcEndpoint
                - ec2:DeleteInternetGateway
                - ec2:DeleteRoute
                - ec2:DeleteRouteTable
                - ec2:DeleteSecurityGroup
                - ec2:DeleteSubnet
                - ec2:DeleteTags
                - ec2:DeleteVpc
                - ec2:DeleteVpcEndpoints
                - ec2:DescribeAccountAttributes
                - ec2:DescribeAddresses
                - ec2:DescribeFlowLogs
                - ec2:DescribeNatGateways
                - ec2:DescribeAvailabilityZones
                - ec2:DeleteFlowLog
                - ec2:DescribeInstances
                - ec2:DescribeInternetGateways
                - ec2:DescribeKeyPairs
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeNetwork*
                - ec2:DescribeRouteTables
                - ec2:DescribeSecurityGroups
                - ec2:DescribeSubnets
                - ec2:DescribeTags
                - ec2:DescribeVpcEndpoints
                - ec2:DescribeVpcs
                - ec2:DeleteNetwork*
                - ec2:DetachInternetGateway
                - ec2:DisassociateAddress
                - ec2:ModifyVpcAttribute
                - ec2:ReleaseAddress
                - ec2:ReplaceNetworkAcl*
                - ec2:RevokeSecurityGroupEgress
                - ec2:RevokeSecurityGroupIngress
                - iot:CreateThing
                - iot:CreatePolicy
                - iot:CreatePolicyVersion
                - iot:CreateThingGroup
                - iot:CreateTopicRule
                - iot:DeleteCertificate
                - iot:DeletePolicy
                - iot:DeletePolicyVersion
                - iot:DeleteThing
                - iot:DeleteThingGroup
                - iot:DescribeCertificate
                - iot:DescribeEndpoint
                - iot:DescribeThing
                - iot:DescribeThingGroup
                - iot:DetachPrincipalPolicy
                - iot:DetachThingPrincipal
                - iot:GetPolicy
                - iot:GetTopicRule
                - iot:ListPolicyVersions
                - iot:ListPrincipalPolicies
                - iot:ListThingPrincipals
                - iot:ReplaceTopicRule
                - iot:UpdateCertificate
                - iot:UpdateEventConfigurations
                - iot:DeleteTopicRule
                - kms:CreateKey
                - kms:DescribeKey
                - kms:CreateAlias
                - kms:DeleteAlias
                - kms:PutKeyPolicy
                - kms:ScheduleKeyDeletion
                - kms:EnableKeyRotation
                - kms:ListAliases
                - kms:CreateAlias
                - kms:CreateGrant
                - sqs:CreateQueue
                - sqs:AddPermission
                - sqs:DeleteQueue
                - sqs:GetQueueAttributes
                - sqs:GetQueueUrl
                - sqs:SetQueueAttributes
                - sqs:TagQueue
                - sqs:RemovePermission
                - events:DeleteRule
                - events:EnableRule
                - events:PutRule
                - events:PutTargets
                - events:RemoveTargets
                - events:CreateEventBus
                - events:DeleteEventBus
                - events:DescribeRule
                - events:PutPermission
                - events:RemovePermission
                - sns:CreateTopic
                - sns:DeleteTopic
                - sns:Subscribe
                - sns:Unsubscribe
                - sns:GetTopicAttributes
                - sns:SetTopicAttributes
                - autoscaling:Attach*
                - autoscaling:Detach*
                - autoscaling:Set*
                - autoscaling:Update*
                - autoscaling:Describe*
                - autoscaling:Create*
                - autoscaling:Delete*
                - autoscaling:Put*
                - autoscaling:TerminateInstanceInAutoScalingGroup
                - autoscaling:RecordLifecycleActionHeartbeat
                - autoscaling:CompleteLifecycleAction
                - autoscaling:CancelInstanceRefresh
                - autoscaling:Register*
                - autoscaling:ExecutePolicy
                - autoscaling:ResumeProcesses
                - rds:AddTagsToResource
                - rds:Create*
                - rds:Describe*
                - rds:Delete*
                - rds:Remove*
                - rds:Modify*
                - rds:RebootDBInstance
                - rds:RestoreDBInstanceFromDBSnapshot
                - rds:ResetDBClusterParameterGroup
                - rds:ResetDBParameterGroup
                - logs:Describe*
                - logs:Create*
                - logs:Delete*
                - logs:Put*
                - ecs:CreateCluster
                - ecs:CreateService
                - ecs:CreateTaskSet
                - ecs:DeleteCluster
                - ecs:DeleteService
                - ecs:DeleteTaskSet
                - ecs:DescribeServices
                - ecs:DescribeTaskDefinition
                - ecs:DescribeTasks
                - ecs:DescribeClusters
                - ecs:DescribeContainerInstances
                - ecs:DiscoverPollEndpoint
                - ecs:DeregisterContainerInstance
                - ecs:DeregisterTaskDefinition
                - ecs:ListTasks
                - ecs:RegisterTaskDefinition
                - ecs:UpdateService
                - ecs:UpdateTaskSet
                - ecs:UpdateContainerInstancesState
                - ecs:UpdateClusterSettings
                - ecs:UntagResource
                - ecs:TagResource
                - ecs:Submit*
                - ecs:PutAttributes
                - lambda:Get*
                - lambda:List*
                - lambda:Create*
                - lambda:Delete*
                - lambda:Update*
                - lambda:Publish*
                - lambda:AddPermission
                - lambda:InvokeFunction
                - lambda:RemovePermission
                - lambda:PutFunctionConcurrency
                - apigateway:DELETE
                - apigateway:PUT
                - apigateway:PATCH
                - apigateway:POST
                - apigateway:GET
                - states:CreateStateMachine
                - states:UpdateStateMachine
                - states:DeleteStateMachine
                - states:TagResource
                - states:UntagResource
              Resource: "*"
            - Sid: ssm
              Effect: Allow
              Action:
                - ssm:GetParameters
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CDF_CODECOMMIT_USERNAME"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CDF_CODECOMMIT_PASSWORD"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CDF_CODECOMMIT_EMAIL"
            - Sid: s3bucket
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
                - s3:PutObjectVersion
                - s3:GetBucketPolicy
                - s3:PutBucketPolicy
                - s3:PutObjectAcl
                - s3:ListBucket
                - s3:GetObjectVersion
                - s3:PutEncryptionConfiguration
                - s3:GetEncryptionConfiguration
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${StagingArtifactStoreBucketName}
                - !Sub arn:${AWS::Partition}:s3:::${StagingArtifactStoreBucketName}/*
                - !Sub arn:${AWS::Partition}:s3:::${LiveArtifactStoreBucketName}
                - !Sub arn:${AWS::Partition}:s3:::${LiveArtifactStoreBucketName}/*
                - !Sub arn:${AWS::Partition}:s3:::${DocumentationBucketName}
                - !Sub arn:${AWS::Partition}:s3:::${DocumentationBucketName}/*
            - Sid: iam
              Effect: Allow
              Action:
                - iam:AddRoleToInstanceProfile
                - iam:AttachRolePolicy
                - iam:CreateInstanceProfile
                - iam:CreatePolicy
                - iam:CreateRole
                - iam:DeleteInstanceProfile
                - iam:DeletePolicy
                - iam:DeleteRole
                - iam:DeleteRolePolicy
                - iam:DetachRolePolicy
                - iam:GetInstanceProfile
                - iam:GetPolicy
                - iam:GetRole
                - iam:GetRolePolicy
                - iam:ListAttachedRolePolicies
                - iam:ListInstanceProfiles
                - iam:ListInstanceProfilesForRole
                - iam:ListRolePolicies
                - iam:ListRoles
                - iam:ListPolicyVersions
                - iam:PassRole
                - iam:PutRolePolicy
                - iam:RemoveRoleFromInstanceProfile
              Resource:
                - "*"
            - Sid: logs
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Effect: Allow
              Resource:
                - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
            - Sid: ecr
              Action:
                - ecr:CreateRepository
                - ecr:GetDownloadUrlForLayer
                - ecr:BatchGetImage
                - ecr:BatchCheckLayerAvailability
                - ecr:PutImage
                - ecr:InitiateLayerUpload
                - ecr:UploadLayerPart
                - ecr:CompleteLayerUpload
                - ecr:DescribeRepositories
                - ecr:GetAuthorizationToken
              Effect: Allow
              Resource:
                - "*"
            - Sid: greengrass
              Action:
                - 'greengrass:*'
              Effect: Allow
              Resource:
                - !Sub 'arn:aws:greengrass:${AWS::Region}:${AWS::AccountId}:*'
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-codePipelineRole', !Sub '${CdfCoreRepoName}-cicd-${Environment}-codePipelineRole' ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeCommitPowerUser
      Policies: 
        - 
          PolicyName: "CodePipelineServicePolicies"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: "*"
                Effect: Allow
              - 
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::${StagingArtifactStoreBucketName}/*'
                  - !Sub 'arn:aws:s3:::${StagingArtifactStoreBucketName}'
                  - !Sub 'arn:aws:s3:::${LiveArtifactStoreBucketName}/*'
                  - !Sub 'arn:aws:s3:::${LiveArtifactStoreBucketName}'
                Effect: Allow
              - 
                Action:
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::codepipeline*
                Effect: Allow
              - 
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: "*"
                Effect: Allow
              - 
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                  - lambda:ListTags
                  - lambda:TagResource
                  - lambda:UntagResource
                Resource: "*"
                Effect: Allow
              - 
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
              - 
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: "*"
                Effect: Allow
                  
  CicdInvokerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-cicdInvokerRole', !Sub '${CdfCoreRepoName}-cicd-${Environment}-cicdInvokerRole' ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
      Policies: 
        - 
          PolicyName: "CodePipelinePolicies"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Action:
                  - 'codepipeline:StartPipelineExecution'
                Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:cdf-*-${Environment}'
                Effect: Allow   
                
  FailedTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: !Sub '${DeployPipeline}-onFailure'
      TopicName: !Sub '${DeployPipeline}-onFailure'
      KmsMasterKeyId: alias/aws/sns

  FailedTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
      Topics:
        - !Ref FailedTopic

  SuccessTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: !Sub '${DeployPipeline}-onSuccess'
      TopicName: !Sub '${DeployPipeline}-onSuccess'
      KmsMasterKeyId: alias/aws/sns
    DependsOn: 
      - DeployPipeline

  SuccessTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
      Topics:
        - !Ref SuccessTopic
        
  SuccessRule:
    Type: "AWS::Events::Rule"
    Properties: 
      Name: !Sub '${DeployPipeline}-onSuccess'
      Description: !Sub '${CdfCoreRepoName} CodePipeline success.'
      EventPattern: 
        source:
          - "aws.codepipeline"
        detail-type:
          - "CodePipeline Pipeline Execution State Change"
        detail:
          state:
            - "SUCCEEDED"
          pipeline:
            - !Ref DeployPipeline
      State: "ENABLED"
      Targets:
        - 
          Id: success
          Arn: !Ref SuccessTopic
    DependsOn: 
      - DeployPipeline

  ###  Trigger SNS upon failed CodePipelines  ###
  FailedRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub '${DeployPipeline}-onFail'
      Description: !Sub '${CdfCoreRepoName} CodePipeline failure.'
      EventPattern:
        source:
          - "aws.codepipeline"
        detail-type:
          - "CodePipeline Pipeline Execution State Change"
        detail:
          state:
            - "FAILED"
          pipeline:
            - !Ref DeployPipeline
      State: "ENABLED"
      Targets:
        -
          Id: failed
          Arn: !Ref FailedTopic
          InputTransformer:
            InputTemplate: '"The Pipeline <pipeline> has failed." '
            InputPathsMap:
              pipeline: "$.detail.pipeline" 
    DependsOn: 
      - DeployPipeline
