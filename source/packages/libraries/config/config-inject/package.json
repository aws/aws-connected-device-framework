{
  "name": "@cdf/config-inject",
  "version": "3.0.1",
  "description": "node-config variables are injected into inversify IoC container. If you are using inversify with node-config this library will be useful. Loosly based on inversify-config-injection library.",
  "author": "Atul Bargaje",
  "main": "dist/index.js",
  "typings": "dist/index.d.ts",
  "scripts": {
    "clean": "npx shx rm -rf dist tsconfig.tsbuildinfo bundle.zip .rush .nyc_output *.log",
    "lint": "npx eslint . --ext '.ts'",
    "build": "npx tsc -b",
    "test": "rushx lint && NODE_ENV=test NODE_CONFIG_DIR='src/config' jest --silent --passWithNoTests"
  },
  "dependencies": {
    "@cdf/errors": "^3.0.0",
    "@cdf/logger": "^3.0.0",
    "config": "3.3.6",
    "inversify": "5.1.1",
    "js-yaml": "4.1.0",
    "reflect-metadata": "0.1.13"
  },
  "devDependencies": {
    "@types/config": "0.0.38",

    "@rushstack/eslint-config": "2.3.4",
    "eslint": "7.26.0",

    "nyc": "15.1.0",
    "shx": "0.3.3",

    "@types/jest": "26.0.23",
    "@typescript-eslint/eslint-plugin": "4.23.0",
    "@typescript-eslint/parser": "4.23.0",
    "jest-create-mock-instance": "1.1.0",
    "jest-haste-map": "26.6.2",
    "jest-mock-extended": "1.0.14",
    "jest-mock": "26.6.2",
    "jest-resolve": "26.6.2",
    "jest": "26.6.3",
    "ts-jest": "26.5.6",
    "typescript": "4.2.4",
  
    "@types/node": "14.6.1"
  },
  "jest": {
    "globals": {
      "NODE_CONFIG_STRICT_MODE": false,
      "SUPPRESS_NO_CONFIG_WARNING": true
    },
    "roots": [
      "<rootDir>/src"
    ],
    "transform": {
      "^.+\\.tsx?$": "ts-jest"
    },
    "testMatch": [
      "<rootDir>/**/?(*.)+(spec|test).ts?(x)"
    ],
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "jsx",
      "json",
      "node"
    ]
  },
  "license": "ISC",
  "private": true
}
