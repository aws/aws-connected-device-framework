# Official framework image. Look for the different tagged releases at: https://hub.docker.com/r/library/node/tags/

# include:
#   - local: cicd/master-brnach

# variables:
#   !reference [.branch-variables, variables]

variables:
  CONFIG_REPO_PROJECT_ID: 9703
  CONFIG_PACKAGE_NAME: cdf-infrastructure-demo
  APP_CONFIG_DIR: common/build/configdir

.staging-variables: &staging-variables
  DEPLOY_ARTIFACTS_STORE_BUCKET: "cdf-cfn-artifacts-317315070315-ap-southeast-2"
  CONFIG_ENVIRONMENT: development
  ENVIRONMENT: development-staging
  VPC_ID: vpc-0edf6d9d5903d4754
  SOURCE_SECURITY_GROUP_ID: sg-0846a3eef2618ddde
  PRIVATE_SUBNET_IDS: "subnet-04521d956927be786,subnet-0d3bf77524108f064"
  PUBLIC_SUBNET_IDS: "subnet-0c6688f4ef6679e6a,subnet-01751ca355739fdbd"
  PRIVATE_ROUTE_TABLE_IDS: "rtb-04604d45350f0fee2,rtb-07dc98ec3293c0b02"
  ASSETLIBRARY_MODE: full
  KEY_PAIR_NAME: cdf-bastion-key
  BASTION_REMOTE_ACCESS_CIDR: "54.240.193.1/32"
  KMS_KEY_ID: "0546de6a-e7d0-4a92-aa27-fd771d42be0a"
  USE_EXISTING_VPC: "true"
  TEMPLATE_SNIPPET_S3_URI_BASE: "s3://cdf-cfn-artifacts-317315070315-ap-southeast-2/cfn/"
  API_GATEWAY_DEFINITION_TEMPLATE: cfn-apiGateway-noAuth.yaml

.common-build-steps: &common-build-steps # install dependencies
  - rush install --bypass-policy --purge
  # build
  - rush build

.common-artifacts: &common-artifacts
  artifacts:
    paths:
      - common/
      - infrastructure/**/build.zip
      - packages/**/.rush/
      - packages/**/dist/
      - packages/**/tsconfig.tsbuildinfo
      - packages/**/bundle.zip

stages:
  - build
  # - test
  - deployStage
  # - integrationTest

### not working at the moment, therefore using artifacts as a temp workaround
# cache:
#   # enable per-branch caching
#   key: "$CI_COMMIT_REF_SLUG"
#   paths:
#     - *common-artifacts

before_script:
  - env | sort
  - yum update -y
  - yum install git openssh-clients tar -y
  - git config --global user.name "${GITLAB_USER_NAME}"
  - git config --global user.email "${GITLAB_USER_EMAIL}"
  # install openssl (required to test some services)
  - yum install -y openssl zip unzip
  # install git (required for `rush change`)
  - git version
  - git remote set-url origin https://willsia:${CUSTOM_PERSONAL_ACCESS_TOKEN}@gitlab.aws.dev/connected-device-framework/cdf-core.git
  # # install specific version of pnpm needed by rush
  # - curl -f https://get.pnpm.io/v5.js | node - add --global pnpm@5
  # - pnpm version
  # - npm install -g @microsoft/rush@5.47.0
  # # install aws cli
  # - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  # - unzip awscliv2.zip
  # - ./aws/install

downloadConfig:
  stage: build
  before_script:
    - env | sort
    - echo 'download jq'
    - curl -s -qL -o /usr/bin/jq https://stedolan.github.io/jq/download/linux64/jq
    - chmod +x /usr/bin/jq
    - echo 'download wget'
    - yum install -y wget
  image:
    name: public.ecr.aws/amazonlinux/amazonlinux:2
    entrypoint: [""]
  script:
    - 'CONFIG_PACKAGE_VERSION=$(curl -H "PRIVATE-TOKEN: $CUSTOM_PERSONAL_ACCESS_TOKEN" "${CI_API_V4_URL}/projects/${CONFIG_REPO_PROJECT_ID}/packages?sort=desc" | jq -r ".[0].version")'
    - 'wget --header="PRIVATE-TOKEN: $CUSTOM_PERSONAL_ACCESS_TOKEN" ${CI_API_V4_URL}/projects/${CONFIG_REPO_PROJECT_ID}/packages/generic/${CONFIG_PACKAGE_NAME}/${CONFIG_PACKAGE_VERSION}/config.zip'
    - mkdir -p common/build
    - cp config.zip common/build/config.zip
  artifacts:
    paths:
      - common/build/config.zip

buildLayer:
  stage: build
  before_script:
    - echo 'do nothing on buildLayer'
  image:
    name: public.ecr.aws/amazonlinux/amazonlinux:2
    entrypoint: [""]
  script:
    - mkdir -p common/build
    - yum update -y && yum install -y openssl zip
    - cd common/build && mkdir -p bin lib && cp /bin/openssl bin/ && cp /usr/lib64/libbz2.so.1 lib/ && zip -r build.zip * && rm -rf bin lib
  artifacts:
    paths:
      - common/build/build.zip

.build:
  stage: build
  image: public.ecr.aws/lambda/nodejs:14
  script:
    - *common-build-steps
    # enforce need for changelog
    - rush change -v
  <<: *common-artifacts

.test:
  stage: test
  image: public.ecr.aws/lambda/nodejs:14
  script:
    - *common-build-steps
    # test
    - rush test
    # version projects that have changed
    - rush publish -a
    # Bundling the node project when it past
    - echo Bundling...
    - infrastructure/bundle-core.bash
  <<: *common-artifacts

deployStage:
  stage: deployStage
  image: public.ecr.aws/lambda/nodejs:14
  variables:
    <<: *staging-variables
  script:
    # export the location of the config
    - export CODEBUILD_SRC_DIR_source_infrastructure="${CI_PROJECT_DIR}/${APP_CONFIG_DIR}"
    # unzip the configuration files into app config dir
    - unzip -d $APP_CONFIG_DIR common/build/config.zip
    - ls -al $APP_CONFIG_DIR
    # install jq
    - curl -s -qL -o /usr/bin/jq https://stedolan.github.io/jq/download/linux64/jq
    - chmod +x /usr/bin/jq
    # Copy the build.zip produced by the buildLayer job
    - mkdir -p infrastructure/lambdaLayers/openssl/build && cp common/build/build.zip infrastructure/lambdaLayers/openssl/build/build.zip
    # deploy to staging environment
    # - bash -c cicd/deployproject_build.bash

    #echo installing mkdocs...
    ### note this must be installed individually else pip struggles with dependency resolution
    - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    - python get-pip.py
    - pip install --upgrade pip
    - pip install mkdocs
    - pip install markdown-include
    - pip install pymdown-extensions
    - pip install mkdocs-material
  after_script:
    - bash -c cicd/deployproject_postbuild.bash

.integrationTest:
  stage: integrationTest
  image: public.ecr.aws/lambda/nodejs:14
  variables:
    CONFIG_ENVIRONMENT: demo
    ENVIRONMENT: demo
  script:
    # export the location of the config
    - export CODEBUILD_SRC_DIR_source_infrastructure="${CI_PROJECT_DIR}/${APP_CONFIG_DIR}"
    # unzip the configuration files into app config dir
    - unzip -d $APP_CONFIG_DIR common/build/config.zip
    - ls -al $APP_CONFIG_DIR
    # install jq
    - curl -s -qL -o /usr/bin/jq https://stedolan.github.io/jq/download/linux64/jq
    - chmod +x /usr/bin/jq
    # rush install
    - rush update --purge
    # run in the integration tests
    - bash -c cicd/integrationtestsproject_build.bash
