AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: CDF Commands Service

Globals:
  Api:
    OpenApiVersion: 3.0.1

Parameters:
  Environment:
    Description:  Name of environment.  Used to name the created resources.
    Type: String
    MinLength: 1

  ApplicationConfigurationOverride:
    Description: This allows you to override any configuration application configuration. Must be a JSON formatted string. Any configurations contained in this will override the configurations found and merged from the config files.
    Type: String
    MinLength: 1

  TemplateSnippetS3UriBase:
    Description: |
      S3 uri of directory where template snippets are stored for the account.
    Type: String
    MinLength: 1

  AuthType:
    Description: Authorization type to apply to the API gateway endpoints
    Type: String
    Default: None
    AllowedValues:
      - None
      - Private
      - Cognito
      - LambdaRequest
      - LambdaToken
      - ApiKey
      - IAM
    MinLength: 1

  ApiGatewayDefinitionTemplate:
    Description: |
      Name of the API Gateway Cloudformation definition along with the authorization method to use.  Use one of the provided
      templates to implement no auth, private, api key, lambda request, lamdba token, or Cognito auth, or modify one to meet your own
      authentization requirements.  The template must exist within the provided TemplateSnippetS3UriBase location.
    Type: String
    MinLength: 1

  VpcId:
    Description: ID of VPC to deploy the API into. Only required if AuthType = 'Private'.
    Type: String
  CDFSecurityGroupId:
    Description: ID of an existing CDF security group to deploy the API into. Only required if AuthType = 'Private'.
    Type: String
  PrivateSubNetIds:
    Description: Comma delimited list of private subnetIds to deploy the API into. Only required if AuthType = 'Private'.
    Type: CommaDelimitedList
  PrivateApiGatewayVPCEndpoint:
    Description: VPC endpoint. Only required if AuthType = 'Private'.
    Type: String

  CognitoUserPoolArn:
    Description: Cognito user pool arn.  Only required if AuthType is set to 'Cognito'.
    Type: String
    Default: 'N/A'

  AuthorizerFunctionArn:
    Description: Lambda authorizer function arn.  Only required if AuthType is set to 'LambdaRequest' or 'LambdaToken'.
    Type: String
    Default: 'N/A'

  BucketName:
    Description: Name of bucket to store command information.
    Type: String
    MinLength: 1
  PresignedUrlMQTTTopic:
    Description: The MQTT topic where pre-signed url requests are sent/received from/to a device.
    Default: cdf/commands/presignedurl/+/+/+
    Type: String
    MinLength: 1


Conditions:

  DeployInVPC: !Not [ !Equals [ !Ref VpcId, 'N/A' ] ]
  DeployWithLambdaAuth: !Or [ !Equals [ !Ref AuthType, 'LambdaRequest' ], !Equals [ !Ref AuthType, 'LambdaToken' ] ]

Resources:

  ApiGatewayApi:
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: !Sub "${TemplateSnippetS3UriBase}${ApiGatewayDefinitionTemplate}"
    DependsOn:
      - RESTLambdaFunction

  ApiGatewayAuthorizerInvokeRole:
    Condition: DeployWithLambdaAuth
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: !Sub "${TemplateSnippetS3UriBase}cfn-role-lambdaRequestAuthInvokerRole.yaml"
    DependsOn:
      - RESTLambdaFunction

  PresignedUrlMQTTRule:
    Type: "AWS::IoT::TopicRule"
    Properties:
      TopicRulePayload: 
        Actions:
          -
            Lambda:
              FunctionArn: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PresignedUrlLambdaFunction}'
        Description: "Pre-signed url requests (CDF Commands service)"
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: "false" 
        Sql: !Sub "SELECT topic(4) as commandId, topic(5) as thingName, * FROM '${PresignedUrlMQTTTopic}'"   

  PresignedUrlLambdaFunctionInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      SourceArn: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:rule/${PresignedUrlMQTTRule}'
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      FunctionName: !GetAtt PresignedUrlLambdaFunction.Arn
      SourceAccount: !Ref AWS::AccountId   

  JobLifecycleMQTTRule:
    Type: "AWS::IoT::TopicRule"
    Properties:
      TopicRulePayload: 
        Actions:
          -
            Lambda:
              FunctionArn: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${JobLifecycleLambdaFunction}'
        Description: "Job lifecycle rule (CDF Commands service)"
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: "false" 
        Sql: !Sub "SELECT topic(4) as jobId, topic(5) as jobEvent, * FROM '$aws/events/job/+/+'" 

  JobLifecycleMQTTRuleInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      SourceArn: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:rule/${JobLifecycleMQTTRule}'
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      FunctionName: !GetAtt JobLifecycleLambdaFunction.Arn
      SourceAccount: !Ref AWS::AccountId   

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: 
              - lambda.amazonaws.com
              - iot.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref ApplicationPolicies
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - ApplicationPolicies

  ApplicationPolicies:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'cdf-commands application policies'
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "iotjobs"
            Action:
              - "iot:CreateJob"
              - "iot:CreateThingGroup"
              - "iot:DescribeJob"
              - "iot:GetJobDocument"
              - "iot:ListJobExecutionsForJob"
              - "iot:ListJobExecutionsForThing"
              - "iot:DescribeJobExecution"
              - "iot:AssociateTargetsWithJob"
            Effect: Allow
            Resource: 
                - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:job/*"
                - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thing/*"
                - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:thinggroup/*"
          - Sid: "dynamodb"
            Action:
              - "dynamodb:*"
            Effect: Allow
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/cdf-commands-*"
          - Sid: "iampassrole"
            Action:
              - "iam:PassRole"
            Effect: Allow
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/cdf-commands-*"
          - Sid: "s3bucket"
            Action:
              - 's3:ListBucket'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${BucketName}'
          - Sid: "s3objects"
            Action:
              - 's3:Get*'
              - 's3:Put*'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${BucketName}/*'
          - Sid: "mqtt"
            Action:
              - 'iot:Publish'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/cdf/commands/*'

  PresignedUrlLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: presignedurl_iot_rule.presignedurl_rule_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          COMMANDS_S3_ROLE_ARN: !Sub '${LambdaExecutionRole.Arn}'
          COMMANDS_TABLES_TEMPLATES: !Ref TemplatesTable
          COMMANDS_TABLES_JOBS: !Ref JobsTable
      Tracing: Active

  JobLifecycleLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: job_lifecycle_iot_rule.job_lifecycle_rule_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          COMMANDS_S3_ROLE_ARN: !Sub '${LambdaExecutionRole.Arn}'
          COMMANDS_TABLES_TEMPLATES: !Ref TemplatesTable
          COMMANDS_TABLES_JOBS: !Ref JobsTable
      Tracing: Active

  RESTLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: lambda_proxy.rest_handler

      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          COMMANDS_S3_ROLE_ARN: !Sub '${LambdaExecutionRole.Arn}'
          COMMANDS_TABLES_TEMPLATES: !Ref TemplatesTable
          COMMANDS_TABLES_JOBS: !Ref JobsTable
      Tracing: Active

      VpcConfig:
        Fn::If:
          - DeployInVPC
          - SubnetIds: !Ref PrivateSubNetIds
            SecurityGroupIds:
              - !Ref CDFSecurityGroupId
          - Ref: AWS::NoValue

      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  TemplatesTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "templateId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "templateId"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: !Sub 'cdf-commands-templates-${Environment}'

  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub 'cdf-commands-jobs-${Environment}'
      AttributeDefinitions: 
        - 
          AttributeName: "commandId"
          AttributeType: "S"
        - 
          AttributeName: "jobId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "commandId"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      GlobalSecondaryIndexes:
        -
          IndexName: !Sub 'cdf-commands-jobs-byJobId'
          KeySchema: 
            - 
              AttributeName: "jobId"
              KeyType: "HASH"
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - "commandId"
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"


Outputs:
  PresignedUrlLambdaFunction:
    Description: PresignedUrl Lambda Function.
    Value: !Ref PresignedUrlLambdaFunction
  PresignedUrlFunctionName:
    Description: Asset library lambda function name
    Value: !Ref PresignedUrlLambdaFunction
    Export:
      Name: !Sub "${AWS::StackName}-presignedUrlFunctionName"
  PresignedUrlLambdaArn:
    Description: PresignedUrl Lambda Arn
    Value: !Sub "${PresignedUrlLambdaFunction.Arn}"
  RestApiFunctionName:
    Description: REST API lambda function name
    Value: !Ref RESTLambdaFunction
    Export:
      Name: !Sub "${AWS::StackName}-restApiFunctionName"
  RESTLambdaArn:
    Description: REST API Lambda Arn
    Value: !Sub "${RESTLambdaFunction.Arn}"
    Export:
      Name: !Sub "${AWS::StackName}-RESTLambdaArn"
  PresignedUrlLambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub "https://{AWS::Region}.console.aws.amazon.com/lambda/home?region={AWS::Region}#/functions/{PresignedUrlLambdaFunction}"
  RESTLambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub "https://{AWS::Region}.console.aws.amazon.com/lambda/home?region={AWS::Region}#/functions/{RESTLambdaFunction}"
  TemplatesTable:
    Description: Templates database table
    Value: !Ref TemplatesTable
  JobsTable:
    Description: Jobs database table
    Value: !Ref JobsTable
  ApiGatewayUrl:
    Description: URL for application
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
    Export:
      Name: !Sub '${AWS::StackName}-apigatewayurl'
  ApiGatewayHost:
    Description: Host for application
    Value: !Sub '${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-apigatewayhost'
