AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: CDF Greengrass Deployment Service

Globals:
  Api:
    OpenApiVersion: 3.0.1

Parameters:
  Environment:
    Description:  Name of environment.  Used to name the created resources.
    Type: String
    MinLength: 1
  ApplicationConfigurationOverride:
    Description: This allows you to override any configuration application configuration. Must be a JSON formatted string. Any configurations contained in this will override the configurations found and merged from the config files.
    Type: String
    MinLength: 1
  CustAuthStackName:
    Description: Name of custom authorizer Stack (if required).
    Type: String
  GreengrassProvisioningStackName:
    Description: Name of the CDF Greengrass Provisioning stack
    Type: String
  DeploymentLogsBucketName:
    Description: Name of bucket to store command information.
    Type: String
    MinLength: 1

Conditions:
  DeployWithCustomAuth: !Not [ !Equals [ !Ref CustAuthStackName, "" ]]

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Sub 'CDF Greengrass Deployments (${Environment})'

        basePath: "/"
        schemes:
          - https
        paths:
          /:
            x-amazon-apigateway-any-method:
              produces:
                - application/vnd.aws-cdf-v1.0+json
              responses:
                '200':
                  description: '200 response'
                  schema:
                    $ref: "#/definitions/Empty"
              security:
                Fn::If:
                  - DeployWithCustomAuth
                  - - CustomAuthorizer: []
                  - Ref: AWS::NoValue
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RESTLambdaFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

            options:
              consumes:
                - application/vnd.aws-cdf-v1.0+json
                - application/vnd.aws-cdf-v120+json
              produces:
                - application/vnd.aws-cdf-v1.0+json
                - application/vnd.aws-cdf-v120+json
              responses:
                '200':
                  description: '200 response'
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  # a CORS options request will have no content type, API Gateway then defaults to application/json
                  application/json: "{\"statusCode\": 200}"
                  application/vnd.aws-cdf-v1.0+json: "{\"statusCode\": 200}"
                type: mock

          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - application/vnd.aws-cdf-v1.0+json
              parameters:
                - name: proxy
                  in: path
                  required: true
                  type: string
              responses: {}
              security:
                Fn::If:
                  - DeployWithCustomAuth
                  - - CustomAuthorizer: []
                  - Ref: AWS::NoValue
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RESTLambdaFunction.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy

            options:
              consumes:
                - application/vnd.aws-cdf-v1.0+json
                - application/vnd.aws-cdf-v120+json
              produces:
                - application/vnd.aws-cdf-v1.0+json
                - application/vnd.aws-cdf-v120+json
              responses:
                '200':
                  description: '200 response'
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  # a CORS options request will have no content type, API Gateway then defaults to application/json
                  application/json: "{\"statusCode\": 200}"
                  application/vnd.aws-cdf-v1.0+json: "{\"statusCode\": 200}"
                type: mock
        x-amazon-apigateway-binary-media-types:
          - '*/*'
        definitions:
          Empty:
            type: object
            title: Empty Schema
        securityDefinitions:
          Fn::If:
            - DeployWithCustomAuth
            - CustomAuthorizer:
                type: apiKey
                name: Authorization
                in: header
                x-amazon-apigateway-authtype: custom
                x-amazon-apigateway-authorizer:
                  type: token
                  authorizerUri: !Sub
                    - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustAuthLambdaArn}/invocations"
                    - CustAuthLambdaArn:
                        Fn::ImportValue: !Sub
                          '${CustAuthStackName}-CustAuthLambdaArn'
                  authorizerCredentials: !Sub '${ApiGatewayAuthorizerInvokeRole.Arn}'
                  authorizerResultTtlInSeconds: 60
            - Ref: AWS::NoValue
    DependsOn:
      - RESTLambdaFunction

  ApiGatewayAuthorizerInvokeRole:
    Type: AWS::IAM::Role
    Condition: DeployWithCustomAuth
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource:
                  Fn::ImportValue: !Sub
                    "${CustAuthStackName}-CustAuthLambdaArn"
    DependsOn:
      - RESTLambdaFunction

#  TODO: reference the table correctly from the gg-provisioning service
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
              - iot.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref ApplicationPolicies
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: app_policies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: sqs
                Action:
                  - 'sqs:*'
                Effect: Allow
                Resource:
                  - !GetAtt AgentbasedDeploymentQueue.Arn
                  - !GetAtt SSMStateChangeEventsQueue.Arn
              - Sid: dynamodb1
                Effect: Allow
                Action:
                  - dynamodb:GetShardIterator
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:GetRecords
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/cdf-greengrass-provisioning-${Environment}/index/*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/cdf-greengrass-provisioning-${Environment}/stream/*'
              - Sid: dynamodb2
                Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/cdf-greengrass-provisioning-${Environment}'
              - Sid: 'ssm'
                Action:
                  - 'ssm:*'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}::document/*'
              - Sid: 's3'
                Action:
                  - 's3:*'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::cdf-${AWS::AccountId}-${AWS::Region}'


    DependsOn:
      - ApplicationPolicies

  ApplicationPolicies:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'cdf-greengrass-deployment application policies'
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "iampassrole"
            Action:
              - "iam:PassRole"
            Effect: Allow
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
          - Sid: "ssm"
            Action:
              - "ssm:DescribeActivations"
              - "ssm:DeleteActivation"
              - "ssm:CreateActivation"
              - "ssm:DescribeInstanceInformation"
            Effect: Allow
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/*"

  RESTLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: lambda_apigw_proxy.handler
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          GREENGRASS_SSM_MANAGED_INSTANCE_ROLE: !Ref SSMManagedInstanceRole
          GREENGRASS_PROVISIONING_AWS_DYNAMODB_TABLE:
            Fn::ImportValue: !Sub
              '${GreengrassProvisioningStackName}-table'
          GREENGRASS_DEPLOYMENT_AGENTLESS_DEPLOYMENT_QUEUE: !Ref AgentlessDeploymentQueue
          GREENGRASS_DEPLOYMENT_AGENTBASED_DEPLOYMENT_QUEUE: !Ref AgentbasedDeploymentQueue
      Tracing: Active
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  SQSLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: lambda_sqs_proxy.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      Timeout: 900
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          GREENGRASS_SSM_MANAGED_INSTANCE_ROLE: !Ref SSMManagedInstanceRole
          GREENGRASS_PROVISIONING_AWS_DYNAMODB_TABLE:
            Fn::ImportValue: !Sub
              '${GreengrassProvisioningStackName}-table'
          GREENGRASS_DEPLOYMENT_AGENTLESS_DEPLOYMENT_QUEUE: !Ref AgentlessDeploymentQueue
          GREENGRASS_DEPLOYMENT_AGENTBASED_DEPLOYMENT_QUEUE: !Ref AgentbasedDeploymentQueue
      Events:
        AgentlessDeploymentQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt AgentbasedDeploymentQueue.Arn

    DependsOn:
      - AgentbasedDeploymentQueue

  SSMEventsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: lambda_sqs_ssm_proxy.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      Timeout: 900
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          GREENGRASS_SSM_MANAGED_INSTANCE_ROLE: !Ref SSMManagedInstanceRole
          GREENGRASS_PROVISIONING_AWS_DYNAMODB_TABLE:
            Fn::ImportValue: !Sub
              '${GreengrassProvisioningStackName}-table'
          GREENGRASS_DEPLOYMENT_AGENTLESS_DEPLOYMENT_QUEUE: !Ref AgentlessDeploymentQueue
          GREENGRASS_DEPLOYMENT_AGENTBASED_DEPLOYMENT_QUEUE: !Ref AgentbasedDeploymentQueue
      Events:
        SSMStageChangeDeloymentQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt SSMStateChangeEventsQueue.Arn

  SSMAssociationStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Captures all SSM Association State Change events'
      EventPattern:
        source:
          - "aws.ssm"
        detail-type:
          - "EC2 State Manager Instance Association State Change"
          - "EC2 State Manager Association State Change"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SSMStateChangeEventsQueue.Arn
          Id: sqs


  SSMManagedInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ssm.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Ref SSMManagedInstancePolicies

  SSMManagedInstancePolicies:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'cdf-greengrass-deployment managed instance policy'
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "s3Objects"
            Action:
              - 's3:Put*'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${DeploymentLogsBucketName}/*'

  AgentbasedDeploymentQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 960

  AgentlessDeploymentQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 960

  SSMStateChangeEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 960

Outputs:
  RESTLambdaArn:
    Description: REST Lambda Arn
    Value: !Sub "${RESTLambdaFunction.Arn}"
    Export:
      Name: !Sub "${AWS::StackName}-RESTLambdaArn"
  RESTLambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub "https://{AWS::Region}.console.aws.amazon.com/lambda/home?region={AWS::Region}#/functions/{RESTLambdaFunction}"
  ApiGatewayUrl:
    Description: URL for application
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
    Export:
      Name: !Sub '${AWS::StackName}-apigatewayurl'
  SSMManagedInstanceRole:
    Description: Role Arn
    Value: !Sub "${SSMManagedInstanceRole.Arn}"
    Export:
      Name: !Sub "${AWS::StackName}-SSMManagedInstanceRoleArn"
  AgentbasedDeploymentQueueUrl:
    Description: Agentbased Deployment queue URL
    Value: !Sub '${AgentbasedDeploymentQueue}'
    Export:
      Name: !Sub '${AWS::StackName}-agentbased-deployment-queue-url'
  AgentlessDeploymentQueueUrl:
    Description: Agentbased Deployment queue URL
    Value: !Sub '${AgentlessDeploymentQueue}'
    Export:
      Name: !Sub '${AWS::StackName}-agentless-deployment-queue-url'
