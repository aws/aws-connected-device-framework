AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: CDF Greengrass Deployment Service

Globals:
  Api:
    OpenApiVersion: 3.0.1

Parameters:
  Environment:
    Description:  Name of environment.  Used to name the created resources.
    Type: String
    MinLength: 1
  ApplicationConfigurationOverride:
    Description: This allows you to override any configuration application configuration. Must be a JSON formatted string. Any configurations contained in this will override the configurations found and merged from the config files.
    Type: String
    MinLength: 1

  TemplateSnippetS3UriBase:
    Description: |
      S3 uri of directory where template snippets are stored for the account.
    Type: String
    MinLength: 1

  AuthType:
    Description: Authorization type to apply to the API gateway endpoints
    Type: String
    Default: None
    AllowedValues:
      - None
      - Private
      - Cognito
      - LambdaRequest
      - LambdaToken
      - ApiKey
      - IAM
    MinLength: 1

  ApiGatewayDefinitionTemplate:
    Description: |
      Name of the API Gateway Cloudformation definition along with the authorization method to use.  Use one of the provided
      templates to implement no auth, private, api key, lambda request, lamdba token, or Cognito auth, or modify one to meet your own
      authentization requirements.  The template must exist within the provided TemplateSnippetS3UriBase location.
    Type: String
    MinLength: 1

  VpcId:
    Description: ID of VPC to deploy the API into. Only required if AuthType = 'Private'.
    Type: String
  CDFSecurityGroupId:
    Description: ID of an existing CDF security group to deploy the API into. Only required if AuthType = 'Private'.
    Type: String
  PrivateSubNetIds:
    Description: Comma delimited list of private subnetIds to deploy the API into. Only required if AuthType = 'Private'.
    Type: CommaDelimitedList
  PrivateApiGatewayVPCEndpoint:
    Description: VPC endpoint. Only required if AuthType = 'Private'.
    Type: String

  CognitoUserPoolArn:
    Description: Cognito user pool arn.  Only required if AuthType is set to 'Cognito'.
    Type: String
    Default: 'N/A'

  AuthorizerFunctionArn:
    Description: Lambda authorizer function arn.  Only required if AuthType is set to 'LambdaRequest' or 'LambdaToken'.
    Type: String
    Default: 'N/A'

  GreengrassProvisioningStackName:
    Description: Name of the CDF Greengrass Provisioning stack
    Type: String
  DeploymentLogsBucketName:
    Description: Name of bucket to store command information.
    Type: String
    MinLength: 1

Conditions:

  DeployInVPC: !Not [ !Equals [ !Ref VpcId, 'N/A' ] ]
  DeployWithLambdaAuth: !Or [ !Equals [ !Ref AuthType, 'LambdaRequest' ], !Equals [ !Ref AuthType, 'LambdaToken' ] ]

Resources:

  ApiGatewayApi:
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: !Sub "${TemplateSnippetS3UriBase}${ApiGatewayDefinitionTemplate}"
    DependsOn:
      - RESTLambdaFunction

  ApiGatewayAuthorizerInvokeRole:
    Condition: DeployWithLambdaAuth
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: !Sub "${TemplateSnippetS3UriBase}cfn-role-lambdaRequestAuthInvokerRole.yaml"
    DependsOn:
      - RESTLambdaFunction

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
              - iot.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref ApplicationPolicies
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: app_policies
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: sqs
                Action:
                  - 'sqs:*'
                Effect: Allow
                Resource:
                  - !GetAtt AgentbasedDeploymentQueue.Arn
                  - !GetAtt SSMStateChangeEventsQueue.Arn
              - Sid: dynamodb1
                Effect: Allow
                Action:
                  - dynamodb:GetShardIterator
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:GetRecords
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/cdf-greengrass-provisioning-${Environment}/index/*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/cdf-greengrass-provisioning-${Environment}/stream/*'
              - Sid: dynamodb2
                Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/cdf-greengrass-provisioning-${Environment}'
              - Sid: 'ssm'
                Action:
                  - 'ssm:*'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}::document/*'
              - Sid: 's3'
                Action:
                  - 's3:*'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:s3:::cdf-${AWS::AccountId}-${AWS::Region}'


    DependsOn:
      - ApplicationPolicies

  ApplicationPolicies:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'cdf-greengrass-deployment application policies'
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "iampassrole"
            Action:
              - "iam:PassRole"
            Effect: Allow
            Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
          - Sid: "ssm"
            Action:
              - "ssm:DescribeActivations"
              - "ssm:DeleteActivation"
              - "ssm:CreateActivation"
              - "ssm:DescribeInstanceInformation"
            Effect: Allow
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/*"

  RESTLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: lambda_apigw_proxy.handler
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          GREENGRASS_SSM_MANAGED_INSTANCE_ROLE: !Ref SSMManagedInstanceRole
          GREENGRASS_PROVISIONING_AWS_DYNAMODB_TABLE:
            Fn::ImportValue: !Sub
              '${GreengrassProvisioningStackName}-table'
          GREENGRASS_DEPLOYMENT_AGENTLESS_DEPLOYMENT_QUEUE: !Ref AgentlessDeploymentQueue
          GREENGRASS_DEPLOYMENT_AGENTBASED_DEPLOYMENT_QUEUE: !Ref AgentbasedDeploymentQueue
      Tracing: Active

      VpcConfig:
        Fn::If:
          - DeployInVPC
          - SubnetIds: !Ref PrivateSubNetIds
            SecurityGroupIds:
              - !Ref CDFSecurityGroupId
          - Ref: AWS::NoValue

      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  SQSLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: lambda_sqs_proxy.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      Timeout: 900
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          GREENGRASS_SSM_MANAGED_INSTANCE_ROLE: !Ref SSMManagedInstanceRole
          GREENGRASS_PROVISIONING_AWS_DYNAMODB_TABLE:
            Fn::ImportValue: !Sub
              '${GreengrassProvisioningStackName}-table'
          GREENGRASS_DEPLOYMENT_AGENTLESS_DEPLOYMENT_QUEUE: !Ref AgentlessDeploymentQueue
          GREENGRASS_DEPLOYMENT_AGENTBASED_DEPLOYMENT_QUEUE: !Ref AgentbasedDeploymentQueue
      Events:
        AgentlessDeploymentQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt AgentbasedDeploymentQueue.Arn

    DependsOn:
      - AgentbasedDeploymentQueue

  SSMEventsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: lambda_sqs_ssm_proxy.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      Timeout: 900
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          GREENGRASS_SSM_MANAGED_INSTANCE_ROLE: !Ref SSMManagedInstanceRole
          GREENGRASS_PROVISIONING_AWS_DYNAMODB_TABLE:
            Fn::ImportValue: !Sub
              '${GreengrassProvisioningStackName}-table'
          GREENGRASS_DEPLOYMENT_AGENTLESS_DEPLOYMENT_QUEUE: !Ref AgentlessDeploymentQueue
          GREENGRASS_DEPLOYMENT_AGENTBASED_DEPLOYMENT_QUEUE: !Ref AgentbasedDeploymentQueue
      Events:
        SSMStageChangeDeloymentQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt SSMStateChangeEventsQueue.Arn

  SSMAssociationStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Captures all SSM Association State Change events'
      EventPattern:
        source:
          - "aws.ssm"
        detail-type:
          - "EC2 State Manager Instance Association State Change"
          - "EC2 State Manager Association State Change"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SSMStateChangeEventsQueue.Arn
          Id: sqs


  SSMManagedInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - ssm.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Ref SSMManagedInstancePolicies

  SSMManagedInstancePolicies:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'cdf-greengrass-deployment managed instance policy'
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "s3Objects"
            Action:
              - 's3:Put*'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${DeploymentLogsBucketName}/*'

  AgentbasedDeploymentQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 960

  AgentlessDeploymentQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 960

  SSMStateChangeEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 960

  SSMStateChangeEventsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Sub '${SSMStateChangeEventsQueue}'
      PolicyDocument:
        Statement:
          - Action:
              - "SQS:SendMessage"
            Effect: "Allow"
            Resource: !GetAtt SSMStateChangeEventsQueue.Arn
            Principal:
              Service:
                - "events.amazonaws.com"
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt SSMAssociationStateChangeRule.Arn

Outputs:
  RestApiFunctionName:
    Description: REST API lambda function name
    Value: !Ref RESTLambdaFunction
    Export:
      Name: !Sub "${AWS::StackName}-restApiFunctionName"
  RESTLambdaArn:
    Description: REST API Lambda Arn
    Value: !Sub "${RESTLambdaFunction.Arn}"
    Export:
      Name: !Sub "${AWS::StackName}-RESTLambdaArn"
  RESTLambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub "https://{AWS::Region}.console.aws.amazon.com/lambda/home?region={AWS::Region}#/functions/{RESTLambdaFunction}"
  ApiGatewayUrl:
    Description: URL for application
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
    Export:
      Name: !Sub '${AWS::StackName}-apigatewayurl'
  SSMManagedInstanceRole:
    Description: Role Arn
    Value: !Sub "${SSMManagedInstanceRole.Arn}"
    Export:
      Name: !Sub "${AWS::StackName}-SSMManagedInstanceRoleArn"
  AgentbasedDeploymentQueueUrl:
    Description: Agentbased Deployment queue URL
    Value: !Sub '${AgentbasedDeploymentQueue}'
    Export:
      Name: !Sub '${AWS::StackName}-agentbased-deployment-queue-url'
  AgentlessDeploymentQueueUrl:
    Description: Agentbased Deployment queue URL
    Value: !Sub '${AgentlessDeploymentQueue}'
    Export:
      Name: !Sub '${AWS::StackName}-agentless-deployment-queue-url'
