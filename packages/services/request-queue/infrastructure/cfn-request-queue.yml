AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: CDF Request Queue Service

Globals:
  Api:
    OpenApiVersion: 3.0.1

Parameters:
  Environment:
    Description:  Name of environment.  Used to name the created resources.
    Type: String
    MinLength: 1
  PrimaryLambdaArn:
    Description:  ARN of API Lambda function in primary region to be used when replaying API events.
    Type: String
    MinLength: 1
  ReplayPollingEnabled:
    Description:  Should replay Lambda be invoked periodically to check for queued events to replay
    Type: String
    Default: DISABLED
    AllowedValues:
      - ENABLED
      - DISABLED
  ApplicationConfigurationOverride:
    Description: This allows you to override any configuration application configuration. Must be a JSON formatted string. Any configurations contained in this will override the configurations found and merged from the config files.
    Type: String
    MinLength: 1



  TemplateSnippetS3UriBase:
    Description: |
      S3 uri of directory where template snippets are stored for the account.
    Type: String
    MinLength: 1

  AuthType:
    Description: Authorization type to apply to the API gateway endpoints
    Type: String
    Default: None
    AllowedValues:
      - None
      - Private
      - Cognito
      - LambdaRequest
      - LambdaToken
      - ApiKey
      - IAM
    MinLength: 1

  ApiGatewayDefinitionTemplate:
    Description: |
      Name of the API Gateway Cloudformation definition along with the authorization method to use.  Use one of the provided
      templates to implement no auth, private, api key, lambda request, lamdba token, or Cognito auth, or modify one to meet your own
      authentization requirements.  The template must exist within the provided TemplateSnippetS3UriBase location.
    Type: String
    MinLength: 1

  VpcId:
    Description: ID of VPC to deploy the API into. Only required if AuthType = 'Private'.
    Type: String
  CDFSecurityGroupId:
    Description: ID of an existing CDF security group to deploy the API into. Only required if AuthType = 'Private'.
    Type: String
  PrivateSubNetIds:
    Description: Comma delimited list of private subnetIds to deploy the API into. Only required if AuthType = 'Private'.
    Type: CommaDelimitedList
  PrivateApiGatewayVPCEndpoint:
    Description: VPC endpoint. Only required if AuthType = 'Private'.
    Type: String

  CognitoUserPoolArn:
    Description: Cognito user pool arn.  Only required if AuthType is set to 'Cognito'.
    Type: String
    Default: 'N/A'

  AuthorizerFunctionArn:
    Description: Lambda authorizer function arn.  Only required if AuthType is set to 'LambdaRequest' or 'LambdaToken'.
    Type: String
    Default: 'N/A'

Conditions:

  DeployInVPC: !Not [ !Equals [ !Ref VpcId, 'N/A' ] ]
  DeployWithLambdaAuth: !Or [ !Equals [ !Ref AuthType, 'LambdaRequest' ], !Equals [ !Ref AuthType, 'LambdaToken' ] ]


Resources:

  ApiGatewayApi:
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: !Sub "${TemplateSnippetS3UriBase}${ApiGatewayDefinitionTemplate}"
    DependsOn:
      - ProxyLambdaFunction

  ApiGatewayAuthorizerInvokeRole:
    Condition: DeployWithLambdaAuth
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: !Sub "${TemplateSnippetS3UriBase}cfn-role-lambdaRequestAuthInvokerRole.yaml"
    DependsOn:
      - ProxyLambdaFunction

  RestLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref SqsPolicy
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - SqsPolicy

  ReplayLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref SqsPolicy
        - !Ref PrimaryRegionLambdaInvokePolicy
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - SqsPolicy
      - PrimaryRegionLambdaInvokePolicy

  SqsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "cdf-request-queue policy for accessing SQS"
      Path: "/cdf/requestqueue/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - 'sqs:*'
            Effect: Allow
            Resource:
              Fn::GetAtt: 
                - 'RequestQueue'
                - 'Arn'
          - Action:
              - 'sqs:*'
            Effect: Allow
            Resource:
              Fn::GetAtt: 
                - 'DlqQueue'
                - 'Arn'
    DependsOn:
      - RequestQueue
      - DlqQueue

  PrimaryRegionLambdaInvokePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "cdf-request-queue policy for invoking lambda in primary region"
      Path: "/cdf/requestqueue/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !Ref PrimaryLambdaArn

  ProxyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: lambda_proxy.handler
      MemorySize: 512
      Role: !GetAtt RestLambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          REQUESTQUEUE_REQUEST_QUEUE_URL: !Ref RequestQueue
      Tracing: Active

      VpcConfig:
        Fn::If:
          - DeployInVPC
          - SubnetIds: !Ref PrivateSubNetIds
            SecurityGroupIds:
              - !Ref CDFSecurityGroupId
          - Ref: AWS::NoValue

      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY
    DependsOn:
      - RestLambdaExecutionRole

  ReplayLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: replay.handler
      MemorySize: 512
      Role: !GetAtt ReplayLambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          REQUESTQUEUE_REQUEST_QUEUE_URL: !Ref RequestQueue
          REQUESTQUEUE_DLQ_QUEUE_URL: !Ref DlqQueue
      Tracing: Active
    DependsOn:
      - ReplayLambdaExecutionRole

  RequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 60
      ContentBasedDeduplication: true

  DlqQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      ContentBasedDeduplication: true

  ScheduledReplayRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'CloudWatch Event Rule which periodically invokes the replay Lambda function to check for calls to replay'
      ScheduleExpression: 'rate(5 minutes)'
      State: !Ref ReplayPollingEnabled
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - 'ReplayLambdaFunction'
              - 'Arn'
          Id: 'ReplayFunctionTarget'

  ReplayLambdaEventInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ReplayLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - 'ScheduledReplayRule'
          - 'Arn'

Outputs:
  ProxyLambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub "https://{AWS::Region}.console.aws.amazon.com/lambda/home?region={AWS::Region}#/functions/{ProxyLambdaFunction}"
  ProxyLambdaFunction:
    Description: RequestQueue lambda function
    Value: !Sub '${ProxyLambdaFunction.Arn}'
    Export:
        Name: !Sub '${AWS::StackName}-LambdaFunction'
  RequestQueueUrl:
    Description: Request Queue SQS URL
    Value: !Sub '${RequestQueue}'
    Export:
        Name: !Sub '${AWS::StackName}-Request-Queue-URL'
  RequestDlqUrl:
    Description: Request DLQ SQS URL
    Value: !Sub '${DlqQueue}'
    Export:
        Name: !Sub '${AWS::StackName}-Request-DLQ-URL'

  RestApiFunctionName:
    Description: Lambda function name
    Value: !Ref ProxyLambdaFunction
    Export:
      Name: !Sub "${AWS::StackName}-restApiFunctionName"
  ApiGatewayUrl:
    Description: URL for application
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
    Export:
      Name: !Sub '${AWS::StackName}-apigatewayurl'
  ApiGatewayHost:
    Description: Host for application
    Value: !Sub '${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-apigatewayhost'

