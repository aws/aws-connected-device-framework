AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: CDF Request Queue Service

Parameters:  
  Environment:
    Description:  Name of environment.  Used to name the created resources.
    Type: String
    MinLength: 1
  PrimaryLambdaArn:
    Description:  ARN of API Lambda function in primary region to be used when replaying API events.
    Type: String
    MinLength: 1
  ReplayPollingEnabled:
    Description:  Should replay Lambda be invoked periodically to check for queued events to replay
    Type: String
    Default: DISABLED
    AllowedValues:
      - ENABLED
      - DISABLED
  ApplicationConfigurationOverride:
    Description: This allows you to override any configuration application configuration. Must be a JSON formatted string. Any configurations contained in this will override the configurations found and merged from the config files.
    Type: String
    MinLength: 1

  CustAuthStackName:
    Description: Name of custom authorizer Stack (if required).
    Type: String

Conditions:
  DeployWithCustomAuth: !Not [ !Equals [ !Ref CustAuthStackName, "" ]]


Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Sub 'CDF Request Queue (${Environment})'

        basePath: "/"
        schemes:
        - https
        paths:
          /:
            x-amazon-apigateway-any-method:
              produces:
              - application/vnd.aws-cdf-v1.0+json
              responses:
                '200':
                  description: '200 response'
                  schema:
                    $ref: "#/definitions/Empty"
              security:
                Fn::If:
                - DeployWithCustomAuth
                - - CustomAuthorizer: []
                - Ref: AWS::NoValue
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProxyLambdaFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

            options:
              consumes:
              - application/vnd.aws-cdf-v1.0+json
              produces:
              - application/vnd.aws-cdf-v1.0+json
              responses:
                '200':
                  description: '200 response'
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  # a CORS options request will have no content type, API Gateway then defaults to application/json
                  application/json: "{\"statusCode\": 200}"
                  application/vnd.aws-cdf-v1.0+json: "{\"statusCode\": 200}"
                type: mock

          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
              - application/vnd.aws-cdf-v1.0+json
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              responses: {}
              security:
                Fn::If:
                - DeployWithCustomAuth
                - - CustomAuthorizer: []
                - Ref: AWS::NoValue
              x-amazon-apigateway-integration:
                uri: 
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProxyLambdaFunction.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy

            options:
              consumes:
              - application/vnd.aws-cdf-v1.0+json
              produces:
              - application/vnd.aws-cdf-v1.0+json
              responses:
                '200':
                  description: '200 response'
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  # a CORS options request will have no content type, API Gateway then defaults to application/json
                  application/json: "{\"statusCode\": 200}"
                  application/vnd.aws-cdf-v1.0+json: "{\"statusCode\": 200}"
                type: mock
        x-amazon-apigateway-binary-media-types:
          - '*/*'
        definitions:
          Empty:
            type: object
            title: Empty Schema
        securityDefinitions:
          Fn::If:
          - DeployWithCustomAuth
          - CustomAuthorizer:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: custom
              x-amazon-apigateway-authorizer:
                type: token
                authorizerUri: !Sub
                - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustAuthLambdaArn}/invocations"
                - CustAuthLambdaArn: 
                    Fn::ImportValue: !Sub 
                      '${CustAuthStackName}-CustAuthLambdaArn'
                authorizerCredentials: !Sub '${ApiGatewayAuthorizerInvokeRole.Arn}'
                authorizerResultTtlInSeconds: 60
          - Ref: AWS::NoValue
    DependsOn:
      - ProxyLambdaFunction

  ApiGatewayAuthorizerInvokeRole:
    Type: AWS::IAM::Role
    Condition: DeployWithCustomAuth
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "apigateway.amazonaws.com"
            Action: 
              - sts:AssumeRole
      Policies: 
        - 
          PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource:
                  Fn::ImportValue: !Sub
                    "${CustAuthStackName}-CustAuthLambdaArn"  
    DependsOn:
    - ProxyLambdaFunction

  RestLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref SqsPolicy
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - SqsPolicy

  ReplayLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref SqsPolicy
        - !Ref PrimaryRegionLambdaInvokePolicy
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - SqsPolicy
      - PrimaryRegionLambdaInvokePolicy

  SqsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "cdf-request-queue policy for accessing SQS"
      Path: "/cdf/requestqueue/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - 'sqs:*'
            Effect: Allow
            Resource:
              Fn::GetAtt: 
                - 'RequestQueue'
                - 'Arn'
          - Action:
              - 'sqs:*'
            Effect: Allow
            Resource:
              Fn::GetAtt: 
                - 'DlqQueue'
                - 'Arn'
    DependsOn:
      - RequestQueue
      - DlqQueue

  PrimaryRegionLambdaInvokePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "cdf-request-queue policy for invoking lambda in primary region"
      Path: "/cdf/requestqueue/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !Ref PrimaryLambdaArn

  ProxyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: lambda_proxy.handler
      MemorySize: 512
      Role: !GetAtt RestLambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          REQUESTQUEUE_REQUEST_QUEUE_URL: !Ref RequestQueue
      Tracing: Active
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY
    DependsOn:
      - RestLambdaExecutionRole

  ReplayLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build/build.zip
      Handler: replay.handler
      MemorySize: 512
      Role: !GetAtt ReplayLambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 300
      Environment:
        Variables:
          NODE_CONFIG_DIR: './config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          REQUESTQUEUE_REQUEST_QUEUE_URL: !Ref RequestQueue
          REQUESTQUEUE_DLQ_QUEUE_URL: !Ref DlqQueue
      Tracing: Active
    DependsOn:
      - ReplayLambdaExecutionRole

  RequestQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 60
      ContentBasedDeduplication: true

  DlqQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      ContentBasedDeduplication: true

  ScheduledReplayRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'CloudWatch Event Rule which periodically invokes the replay Lambda function to check for calls to replay'
      ScheduleExpression: 'rate(5 minutes)'
      State: !Ref ReplayPollingEnabled
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - 'ReplayLambdaFunction'
              - 'Arn'
          Id: 'ReplayFunctionTarget'

  ReplayLambdaEventInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ReplayLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - 'ScheduledReplayRule'
          - 'Arn'

Outputs:
  ProxyLambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub "https://{AWS::Region}.console.aws.amazon.com/lambda/home?region={AWS::Region}#/functions/{ProxyLambdaFunction}"
  ProxyLambdaFunction:
    Description: RequestQueue lambda function
    Value: !Sub '${ProxyLambdaFunction.Arn}'
    Export:
        Name: !Sub '${AWS::StackName}-LambdaFunction'
  RequestQueueUrl:
    Description: Request Queue SQS URL
    Value: !Sub '${RequestQueue}'
    Export:
        Name: !Sub '${AWS::StackName}-Request-Queue-URL'
  RequestDlqUrl:
    Description: Request DLQ SQS URL
    Value: !Sub '${DlqQueue}'
    Export:
        Name: !Sub '${AWS::StackName}-Request-DLQ-URL'