AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CodePipeline for building cdf-assetlibrary

Parameters:
  CodePipelineName:
    Description: Name of CICD pipeline to create.  If not provided, '${RepoName}-cicd-${Environment}' will be used.
    Type: String
  ServiceStackName:
    Description: Stack name of the CloudFormation template that deploys the service,.  If not provided, '${RepoName}-${Environment}' will be used.
    Type: String
  Environment:
    Description: The name of the environment this stack is being deployed to.
    Type: String
    MinLength: 1
  RepoName:
    Default: cdf-assetlibrary
    Description: Name of codecommit repository for this application.
    Type: String
  Branch:
    Default: master
    Description: Name of codecommit branch.
    Type: String
  CICDRepoName:
    Default: cdf-cicd
    Description: Name of codecommit repository for the CDF CICD module.
    Type: String
  CICDBranch:
    Default: master
    Description: Name of codecommit branch for the CDF CICD module.
    Type: String
  InfrastructureRepoName:
    Description: Name of codecommit repository for the cdf-infrastructure-{customer} module.
    Type: String
    MinLength: 1
  InfrastructureBranch:
    Default: master
    Description: Name of codecommit branch for the cdf-infrastructure-{customer} module.
    Type: String
    MinLength: 1
  LibrariesRepoName:
    Default: cdf-libraries
    Description: Name of codecommit repository for the CDF Libraries module.
    Type: String
  LibrariesBranch:
    Default: master
    Description: Name of codecommit branch for the CDF libraries module.
    Type: String
  CommonCICDStackName:
    Description: Name of CICD common stack name.
    Type: String
    MinLength: 1
  VpcId:
    Description: Id of VPC where Neptune resides (if running Asset Library in 'full' mode)
    Type: String
  SourceSecurityGroupId:
    Description: Id of security group with access to Neptune (if running Asset Library in 'full' mode)
    Type: String
  PrivateSubnetIds:
    Description: Id of private subnets where Neptune resides (if running Asset Library in 'full' mode)
    Type: String
  PrivateRouteTableIds:
    Description: Id of private route table ids where Neptune resides (if running Asset Library in 'full' mode)
    Type: String
  # CustAuthStackName:
  #   Description: Name of custom auth cloudformation stack (if running with custom auth enabled)
  #   Type: String


Conditions:
  CodePipelineNameProvided:  !Not [ !Equals [ !Ref CodePipelineName, "" ] ]
  ServiceStackNameProvided:  !Not [ !Equals [ !Ref ServiceStackName, "" ] ]

Resources:

  FilterCommitsProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-filterCommits', !Sub '${RepoName}-cicd-${Environment}-filterCommits' ]
      Description: !Sub 'Filters git commits for the ${CodePipelineName} pipeline.'
      ServiceRole:
        Fn::ImportValue:
          !Sub '${CommonCICDStackName}-CodeBuildRole'
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !Sub '${CodePipelineName}-filterCommits'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: REPO_NAME_CODEBUILD_SRC_DIR
            Type: PLAINTEXT
            Value: !Ref RepoName
          - Name: BRANCH_CODEBUILD_SRC_DIR
            Type: PLAINTEXT
            Value: !Ref Branch
          - Name: REPO_NAME_CODEBUILD_SRC_DIR_source_libraries
            Type: PLAINTEXT
            Value: !Ref LibrariesRepoName
          - Name: BRANCH_CODEBUILD_SRC_DIR_source_libraries
            Type: PLAINTEXT
            Value: !Ref LibrariesBranch
      Source: 
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          env:
            parameter-store:
              CDF_CODECOMMIT_USERNAME: "CDF_CODECOMMIT_USERNAME"
              CDF_CODECOMMIT_EMAIL: "CDF_CODECOMMIT_EMAIL"
              CDF_CODECOMMIT_PASSWORD: "CDF_CODECOMMIT_PASSWORD"
          phases:
            install:
              commands:
                - bash -c $CODEBUILD_SRC_DIR_source_cicd/scripts/filterproject_install.bash
            pre_build:
              commands:
                - bash -c $CODEBUILD_SRC_DIR_source_cicd/scripts/filterproject_prebuild.bash
          artifacts:
            secondary-artifacts:
              gitified_main:
                base-directory: $CODEBUILD_SRC_DIR
                discard-paths: no
                files:
                  - '**/*'
              gitified_libraries:
                base-directory: $CODEBUILD_SRC_DIR_source_libraries
                discard-paths: no
                files:
                  - '**/*'


  ###  CodeBuild project that calls the package and deploy scripts to deploy the service, along with
  ###  setting any necessary CloudFormation configuration.
  DeployCfn:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deploy', !Sub '${RepoName}-cicd-${Environment}-deploy' ]
      Description: !Sub 'Packages and deploys the CFN for deployment of ${RepoName}.'
      ServiceRole:
        Fn::ImportValue:
          !Sub '${CommonCICDStackName}-CodeBuildRole'
      Artifacts:
        NamespaceType: NONE
        Packaging: NONE
        Type: CODEPIPELINE
        Name: !If [CodePipelineNameProvided, !Sub '${CodePipelineName}-deploy', !Sub '${RepoName}-cicd-${Environment}-deploy' ]
      TimeoutInMinutes: 5
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:8.11.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: DEPLOY_ARTIFACTS_STORE_BUCKET
            Type: PLAINTEXT
            Value:
              Fn::ImportValue:
                !Sub '${CommonCICDStackName}-ArtifactBucket'
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: VPC_ID
            Type: PLAINTEXT
            Value: !Ref VpcId
          - Name: SOURCE_SECURITY_GROUP_ID
            Type: PLAINTEXT
            Value: !Ref SourceSecurityGroupId
          - Name: PRIVATE_SUBNET_IDS
            Type: PLAINTEXT
            Value: !Ref PrivateSubnetIds
          - Name: PRIVATE_ROUTE_TABLE_IDS
            Type: PLAINTEXT
            Value: !Ref PrivateRouteTableIds
          # - Name: CUST_AUTH_STACK_NAME
          #   Type: PLAINTEXT
          #   Value: !Ref CustAuthStackName
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                # install required binary
                - curl -s -qL -o /usr/bin/jq https://stedolan.github.io/jq/download/linux64/jq
                - chmod +x /usr/bin/jq
            build:
              commands:
                - bash -c infrastructure/package-cfn.bash
            post_build:
              commands:
                - export ASSETLIBRARY_CONFIG_LOCATION="$CODEBUILD_SRC_DIR_source_infrastructure/assetlibrary/${ENVIRONMENT}-config.json"
                - bash -c infrastructure/deploy-cfn.bash
      EncryptionKey: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3'


  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !If [CodePipelineNameProvided, !Ref CodePipelineName, !Sub '${RepoName}-cicd-${Environment}' ]
      RoleArn:
        Fn::ImportValue:
          !Sub '${CommonCICDStackName}-CodePipelineRoleArn'
      Stages:
        -
          Name: source
          Actions:
            -
              Name: main
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: source_main
              Configuration:
                BranchName: !Ref Branch
                RepositoryName: !Ref RepoName
              RunOrder: 1
            -
              Name: cicd
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: source_cicd
              Configuration:
                BranchName: !Ref CICDBranch
                RepositoryName: !Ref CICDRepoName
              RunOrder: 1
            -
              Name: infrastructure
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: source_infrastructure
              Configuration:
                BranchName: !Ref InfrastructureBranch
                RepositoryName: !Ref InfrastructureRepoName
              RunOrder: 1
            -
              Name: libraries
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: source_libraries
              Configuration:
                BranchName: !Ref LibrariesBranch
                RepositoryName: !Ref LibrariesRepoName
              RunOrder: 1

        -
          Name: filter-commits
          Actions:
            -
              Name: filter
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: source_main
                - Name: source_cicd
                - Name: source_libraries
              OutputArtifacts:
                - Name: gitified_main
                - Name: gitified_libraries
              Configuration:
                ProjectName: !Ref FilterCommitsProject
                PrimarySource: source_main
              RunOrder: 1

        -
          Name: build
          Actions:
            -
              Name: build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: gitified_main
                - Name: source_cicd
                - Name: source_infrastructure
                - Name: gitified_libraries
              OutputArtifacts:
                - Name: compiled
              Configuration:
                ProjectName: 
                  Fn::ImportValue:
                    !Sub '${CommonCICDStackName}-BuildProject'
                PrimarySource: gitified_main
              RunOrder: 1

        -
          Name: deploy
          Actions:
            -
              Name: deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: compiled
                - Name: source_cicd
                - Name: source_infrastructure
              Configuration:
                ProjectName: !Ref DeployCfn
                PrimarySource: compiled
              RunOrder: 1

      ArtifactStore:
        Type: S3
        Location:
          Fn::ImportValue:
            !Sub '${CommonCICDStackName}-ArtifactBucket'


  ### Nested stack creates the success and failure topics and rules
  NestedStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ../../../cdf-cicd/infrastructure/cicd-nested-library.yaml
      Parameters:
        CodePipelineName: !If [CodePipelineNameProvided, !Ref CodePipelineName, !Sub '${RepoName}-cicd-${Environment}' ]
        RepoName: !Ref RepoName
        DeployPipeline: !Ref DeployPipeline
        CommonCICDStackName: !Ref CommonCICDStackName

    DependsOn: 
      - DeployPipeline

      
Outputs:  
  SuccessTopic:
    Value: !GetAtt NestedStack.Outputs.SuccessTopic
    Export: 
      Name: !Sub '${AWS::StackName}-SuccessTopic'
